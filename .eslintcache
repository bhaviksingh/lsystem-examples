[{"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/index.tsx":"1","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSPreview.tsx":"2","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/EditorPage.tsx":"3","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/utils.ts":"4","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditor.tsx":"5","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSCustomizer.tsx":"6","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/ExamplesPage.tsx":"7","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/worker/index.ts":"8","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/worker/worker.ts":"9","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSTextViewer.tsx":"10","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSAllViewer.tsx":"11","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/index.ts":"12","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/Examples/Lilac.tsx":"13","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/Examples/TextGarden.tsx":"14","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/Examples/Webpage.tsx":"15","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSTextEditor.tsx":"16","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/index.tsx":"17","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/LSImageViewerController.tsx":"18","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/LSImageViewer3D.tsx":"19","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/LSImageViewer2D.tsx":"20","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/drawChar.ts":"21","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/LSImageViewerBasic.tsx":"22"},{"size":1061,"mtime":1627854113920,"results":"23","hashOfConfig":"24"},{"size":4428,"mtime":1629409030411,"results":"25","hashOfConfig":"24"},{"size":1658,"mtime":1628280998240,"results":"26","hashOfConfig":"24"},{"size":3359,"mtime":1629487646134,"results":"27","hashOfConfig":"24"},{"size":1438,"mtime":1627853659055,"results":"28","hashOfConfig":"24"},{"size":13426,"mtime":1622246845772,"results":"29","hashOfConfig":"24"},{"size":3816,"mtime":1620881620411,"results":"30","hashOfConfig":"24"},{"size":612,"mtime":1627852862790,"results":"31","hashOfConfig":"24"},{"size":654,"mtime":1627852181355,"results":"32","hashOfConfig":"24"},{"size":365,"mtime":1627853312579,"results":"33","hashOfConfig":"24"},{"size":927,"mtime":1629489507753,"results":"34","hashOfConfig":"24"},{"size":260,"mtime":1629488918289,"results":"35","hashOfConfig":"24"},{"size":3146,"mtime":1629489276811,"results":"36","hashOfConfig":"24"},{"size":2258,"mtime":1629489086180,"results":"37","hashOfConfig":"24"},{"size":2963,"mtime":1629489084742,"results":"38","hashOfConfig":"24"},{"size":1865,"mtime":1629408599773,"results":"39","hashOfConfig":"24"},{"size":282,"mtime":1629488885977,"results":"40","hashOfConfig":"24"},{"size":4686,"mtime":1629498549702,"results":"41","hashOfConfig":"24"},{"size":508,"mtime":1629489247565,"results":"42","hashOfConfig":"24"},{"size":978,"mtime":1629489229976,"results":"43","hashOfConfig":"24"},{"size":2958,"mtime":1629487385715,"results":"44","hashOfConfig":"24"},{"size":2552,"mtime":1629489257359,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1r4qygr",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"48"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/index.tsx",[],["97","98"],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSPreview.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/EditorPage.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/utils.ts",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditor.tsx",["99"],"import React from \"react\";\nimport LSystem from \"@bvk/lsystem\";\nimport LSCustomizer from \"./LSCustomizer\";\nimport P5Turtle from \"./LSDraw/P5Turtle\";\nimport { GFXProps, LSProps } from \"./utils\";\nimport LSViewer from \"./LSViewer\";\n\n\n/* LSEditor.ts\n* This class is a combination of an LSCustomizer and an LSViewer\n* It manages updates from the customizer, and mantains LS/GFXProps to pass into the viewer.\n* */\ninterface LSEditorState {\n  LSystem: LSystem | undefined,\n  gfxProps?: GFXProps\n}\ninterface LSEditorProps {\n  initLSProps: LSProps\n  initGFXProps?: GFXProps\n}\nexport default class LSEditor extends React.Component<LSEditorProps, LSEditorState> {\n  state: LSEditorState = {\n      LSystem: undefined,\n      gfxProps: this.props.initGFXProps || {}\n  }\n  onLSIterated = (LS: LSystem) => {\n      this.setState({ LSystem: LS })\n  }\n  onLSReset = (LS: LSystem) => {\n      this.setState({ LSystem: LS });\n  }\n  onGFXPropsUpdated = (gfxProps: GFXProps) => {\n      this.setState({gfxProps: gfxProps});\n  }\n  render() {\n      return (\n      <div className=\"side-by-side\">\n          <LSCustomizer\n          onLSIterated={this.onLSIterated}\n          onLSReset={this.onLSReset}\n          onGFXPropsUpdate={this.onGFXPropsUpdated}\n          initLSProps={this.props.initLSProps}\n          initGFXProps={this.props.initGFXProps}\n          key=\"LSCustomizer\"\n          />\n          <LSViewer LSystem={this.state.LSystem} gfxProps={this.state.gfxProps}/>\n      </div >\n      )\n    }\n}\n\n","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSCustomizer.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/ExamplesPage.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/worker/index.ts",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/worker/worker.ts",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSTextViewer.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSAllViewer.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/index.ts",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/Examples/Lilac.tsx",["100"],"import LSystem, { ParamsValue } from \"@bvk/lsystem\"\nimport p5 from \"p5\"\nimport LSImageViewer3D from \"../../components/LSViewer/LSImageViewer3D\"\nimport { CompleteLSExample, GFXProps } from \"../../components/utils\"\n\nconst lilacData: CompleteLSExample = {\n  name: \"lilac\",\n  lsProps: {\n    axiom: \"!(0.9) #(120) [ -(44)  ^(20) F(50) AK ] \",\n    productions: [\n      \"A: P I(0) /(90)  A\",\n      \"I(t) {t!=2}:  F I(t+1)\",\n      \"I(t) {t==2}: ^(rnd(5,15)) #(rnd(60,150)) I(t+1)[-(45)FFA][+(45)FFA][FFA]\",\n      \"P: [-(45)/(45)K][+(45)/(45)K]\",\n      \"K: [F #(100) F [~ M(0.05)]]\",\n      \"M(s) {s<0.1}: M(s+0.05)\",\n      \"M(s) {s>=0.1}: M(0.1)\"\n    ],\n    iterations: 16,\n  },\n  gfxProps: {\n    length: 3,\n    renderType: [\"3d\"],\n    width: 1200,\n    height: 850,\n    angle: 8\n  },\n};\nexport default function Lilac() {\n  let ls =  new LSystem(lilacData.lsProps.axiom, lilacData.lsProps.productions, lilacData.lsProps.iterations);\n  let gfxProps = lilacData.gfxProps; \n\n  return (\n    <div > \n      <DrawLilac LSystem={ls} GFXProps={gfxProps} /> \n      \n    </div>)\n}\n\nconst flowerHue = 325;  \nclass DrawLilac extends LSImageViewer3D {\n  windAngle = 0;\n  animationSpeed = 600;\n  preload = (p: p5) => {\n    p.loadModel(\n      process.env.PUBLIC_URL + \"/assets/lily-flat.obj\",\n      true,\n      (m) => {\n        this.models.push(m);\n        this.startIterationAnimation()\n      },\n      (e) => {\n        console.log(\"Fail to load model\");\n      }\n    );\n  }\n  moveToCenter = () => {\n    //Do nothing, were already there\n    let p = this.p5Context;\n    if (!p) return;\n    p.background(200, 100,100,0.0);\n    \n    let pos = [-180,-150,-320];\n    p.ambientLight(flowerHue - 95, 80, 100);\n    p.pointLight(flowerHue, 80, 90, -500, -500, -900);\n    p.pointLight(flowerHue + 200, 80, 65, 200, 200, -300);\n    \n    p.camera(pos[0], pos[1], pos[2], pos[0], pos[1],0, 0,1,0);\n    \n  }\n  simulateWind = () => {\n    let maxBlows = Math.floor(Math.random() * 100 + 20);\n    for (var i = 0; i < maxBlows; i++) {\n      setTimeout(() => {\n        this.redraw();\n      }, i * 100);\n    }\n  }\n  drawModel = (p:p5, params: ParamsValue | undefined) => {\n    let scaleValue = params && params[0] ? parseFloat(params[0] as string) : 0.1;\n    let model = this.models[0];\n    if (!model) return;\n    p.push();\n\n    p.noStroke();\n    p.fill(100,100,100);   \n    p.specularMaterial(flowerHue,0,100)\n    p.scale(scaleValue);\n    p.model(model);\n    p.pop();\n  }\n  moveCamera = () => {\n    //Do nothing\n  }\n  render() {\n    return (\n      <div style={{backgroundImage: \"linear-gradient(white 30%, rgb(255,220,250))\"}}>\n        <div\n          style={{\n            position: \"fixed\",\n            top: \"12px\",\n            right: \"12px\",\n            width: \"24px\",\n            height: \"24px\",\n            borderRadius: \"100%\",\n            cursor: \"ne-resize\",\n            background: \"rgb(250,120,200)\"\n          }}\n          onClick={() => this.startIterationAnimation()}\n        >\n          {\" \"}\n        </div>\n        <div onClick={(e) => this.simulateWind()} ref={this.containerRef} style={{marginLeft: \"10%\"}}/>\n      </div>\n    );\n  }\n}","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/Examples/TextGarden.tsx",["101","102"],"import LSystem, { ParamsValue } from \"@bvk/lsystem\";\nimport p5 from \"p5\";\nimport LSImageViewer2D from \"../../components/LSViewer/LSImageViewer2D\";\nimport { CompleteLSExample } from \"../../components/utils\";\n\n\nconst textFlower: CompleteLSExample = {\n  name: \"textFlower\",\n  lsProps: {\n    axiom: \"[S] \",\n    productions: [\n      \"S: A(rnd(5,10))\",\n      \"A(a) {a>=1}: F B(0) B(1) + A(a-1)\",\n      \"B(b) {b==0}: [+(75) F(20) f(10) T(0)]\",\n      \"B(b) {b==1}: [-(75) F(20) f(50) +(180) T(1)]\",\n      \"A(a) {a<1}: FFFF -(120) P(rnd(8,19))\",\n      \"P(p) {p>0}: [F(40) f(10) T(2)] [+(rnd(40,60)) P(p-1)]\",\n      \"P(p) {p==0}: X\"\n    ],\n    iterations: 30,\n  },\n  gfxProps: {\n    length: 40,\n    renderType: [\"2d\"],\n    width: 600,\n    height: 760,\n    angle: 5,\n    center: [0,0.4],\n  },\n};\n\nconst text = [{t:\"you\", s: 16},{t:\"thank\", s:16}, {t:\"☼\", s: 18}]\nconst defaultText = {t: \"\", s: 12};\n\nexport default function textGarden() {\n  let ls = new LSystem(textFlower.lsProps.axiom, textFlower.lsProps.productions, textFlower.lsProps.iterations);\n  let gfxProps = textFlower.gfxProps\n  console.log(ls.getAllIterationsAsString());\n\n  return (<TextTurtle LSystem={ls} GFXProps={gfxProps}/>)\n}\nfunction drawText(p: p5, params: ParamsValue | undefined) {\n  let index =  params && params.length == 1 ? parseInt(params[0]  as string) : -1;\n  let textObj = index > -1 ? text[index] : defaultText;\n  p.push();\n  p.noStroke();\n  p.fill(0,0,0);\n  p.textSize(textObj.s);\n  p.text(textObj.t, 0,0);\n  p.pop();\n}\n\nclass TextTurtle extends LSImageViewer2D {\n  xPercent = 1;\n  preload = (p:p5) => { \n    p.textFont(\"helvetica\");\n  }\n  setDefaults = (p: p5) => {\n    let center = this.props.GFXProps?.center !== undefined ? [p.width * this.props.GFXProps?.center[0], p.height * this.props.GFXProps?.center[1]] : [0, 0];\n    let sw = this.props.GFXProps?.strokeWeight ? this.props.GFXProps?.strokeWeight : 1;\n    let defaultLength = this.props.GFXProps?.length ? this.props.GFXProps?.length : 0.01 * p.height;\n    let defaultAngle = this.xPercent * 5;\n    return {center, sw, defaultLength, defaultAngle}\n  }\n  customRules = {\n    \"T\": drawText \n  }\n  mouseMove = (e: React.MouseEvent) => {\n    let mouseX = e.pageX;\n    let mousePercentage = e.pageX / window.innerWidth - 0.5;\n    console.log(mousePercentage);\n    this.xPercent = mousePercentage;\n    this.redraw();\n  }\n  render() {\n    return (\n    <div onMouseMove={this.mouseMove} className=\"full-bleed\" style={{backgroundImage: \"linear-gradient(white 80%, rgba(140,255,100,0.6))\"}} >\n      <div ref={this.containerRef} style={{display: \"inline-block\", marginLeft: \"50%\", transform: \"translate(-50%, 0)\"}}/>\n    </div>)\n  }\n}\n\n","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/Examples/Webpage.tsx",["103","104"],"import LSystem, { ParamsValue } from \"@bvk/lsystem\";\nimport p5 from \"p5\";\nimport LSImageViewer2D from \"../../components/LSViewer/LSImageViewer2D\";\nimport { CompleteLSExample } from \"../../components/utils\";\n\nlet webData : CompleteLSExample = {\n  lsProps: {\n    axiom: \"A(15)\", \n    productions: [\"A(a):f(a)+B(a)A(a+1)\", \"B(b):[-(90)ffT(b-15)]  [+(90) fff -(90) P(b-20)]\"],\n    iterations: 48\n  },\n  gfxProps: {\n    angle: 5,\n    length: 5,\n    width: 2000,\n    height: 800,\n    center: [-0.18,0.2]\n  }\n}\n\nexport default function WebPage() {\n  let ls = new LSystem(webData.lsProps.axiom, webData.lsProps.productions, webData.lsProps.iterations);\n  let gfxProps = webData.gfxProps;\n  return <WebTurtle LSystem={ls} GFXProps={gfxProps}/>\n}\n\n\nconst text = [\"Alt social \",\n\"Starry night - rhizome \",\n\"Run your own social \",\n\"Special fish\",\n\"Petals network\",\n\"cyberspace and as space\",\n\"Mastodon\",\n\"Feminist community networks \",\n\"Echo\",\n\"This is Fine: Optimism & Emergency in the P2P Network\",\n\"Distributed Web of Care\",\n\"PeerToPeerWeb / Dat\",\n\"Consentful Tech\",\n\"Rediscovering the small web\",\n\"Zonelets: \",\n\"Cozy web/extended internet universe\",\n\"Small web / site.js\",\n\"NYC mesh \",\n\"History of communication \",\n\"Black gooey universe \",\n\"Hand made web \",\n\"Hundred rabbits\",\n\"Dark Study \",\n\"Tiny tools list (everest pipkin)\",\n\"Wonderful world of weird creative tools \",\n\"Glyph Drawing Club\",\n\"Programs | Emergent Works\",\n\"Casual creation tools - a paper \",\n\"SQLLite story\",\n\"Jeffrey Alan schuder\",\n\"Picrew: Create avatars\",\n\"coming age of calm tech - xerox parc\",\n\"The rise of the ambient video game\",\n\"Using the internet mindfully\",\n\"Soft.works\",\n\"hardlyeverything.co\",\n\"How to grow an idea\",]\n\nconst defaultText = \"\";\n\n\nfunction drawText(p: p5, params: ParamsValue | undefined) {\n  let index =  params && params.length == 1 ? parseInt(params[0]  as string) : -1;\n  let textObj = index > -1 ? text[index] : defaultText;\n  p.push();\n  p.noStroke();\n  p.fill(230,100,100);\n  p.textSize(12);\n  p.textStyle()\n  p.text(textObj, 0,0);\n  p.pop();\n}\n\nconst t2 = [\"m\",\n\"y\",\n\" \",\n\"f\",\n\"a\",\n\"v\",\n\"o\",\n\"r\",\n\"i\",\n\"t\",\n\"e\",\n\" \",\n\"r\",\n\"e\",\n\"f\",\n\"e\",\n\"r\",\n\"e\",\n\"n\",\n\"c\",\n\"e\",\n\"s\", ]\n\nfunction drawText2(p: p5, params: ParamsValue | undefined) {\n  let index =  params && params.length == 1 ? parseInt(params[0]  as string) : -1;\n  let textObj = index > -1 && index < t2.length ? t2[index] : defaultText;\n  p.push();\n  p.noStroke();\n  p.fill(0,0,0);\n  p.textSize(14);\n  p.textStyle()\n  p.text(textObj, 0,0);\n  p.pop();\n}\n\nclass WebTurtle extends LSImageViewer2D {\n\n  animationSpeed = 1000;\n  preload = (p:p5) => { \n    //p.textFont(\"consolas\");\n  }\n  customRules = {\n    \"T\": drawText,\n    \"P\": drawText2\n  }\n\n  render() {\n    return (\n    <div className=\"full-bleed\"  >\n      <div ref={this.containerRef} style={{display: \"inline-block\", marginLeft: \"50%\", transform: \"translate(-50%, 0)\"}}/>\n    </div>)\n  }\n}\n\n","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSTextEditor.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/index.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/LSImageViewerController.tsx",["105","106","107","108","109","110"],"import React, {useCallback, useRef, useState} from \"react\";\nimport LSystem, { Axiom } from \"@bvk/lsystem\";\nimport { completeGfxProps, GFXProps, P5CanvasType, renderTypes } from \"../../utils\";\nimport LSImageViewer2D from \"./LSImageViewer2D\";\nimport LSImageViewer3D from \"./LSImageViewer3D\";\nimport { useEffect } from \"react\";\nimport { createImportSpecifier } from \"typescript\";\n\n\ninterface LSImageViewerControllerProps {\n  lSystem: LSystem,\n  gfxProps?: GFXProps,\n  animationEnabled?: boolean,\n  swaprenderStyleEnabled?: boolean\n}\n\ntype ImageRenderTypes = \"2d\" | \"3d\";\n\n\nconst getViewerType = (lSystem: LSystem, gfxProps?: GFXProps) : ImageRenderTypes => {\n  if (gfxProps && gfxProps.renderType) {\n    if (gfxProps.renderType.includes(\"2d\")) \n      return \"2d\"\n    if (gfxProps.renderType.includes(\"3d\")) \n      return \"3d\"\n  }\n  let iterationString = lSystem.getIterationAsString();\n  if (iterationString.match(`.*[&^\\\\\\/].*`)) {\n    console.log(\"Is 3d\");\n    return \"3d\";\n  } else {\n    return \"2d\"\n  }\n}\nconst LSImageViewerController : React.FunctionComponent<LSImageViewerControllerProps> = (props) => {\n\n  const [viewerType, setViewerType] = useState<ImageRenderTypes>( getViewerType(props.lSystem, props.gfxProps));\n  const [currentAxiom, setCurrentAxiom] = useState<Axiom>(props.lSystem.getIterationAsObject())\n  const [allCurrentAxioms, setAllCurrentAxioms] = useState<Axiom[]>(props.lSystem.getAllIterationsAsObject())\n  const [currentIteration, setCurrentIteration] = useState<number>(props.lSystem.iterations);\n\n  const currentlyAnimating = useRef<boolean>(false);\n\n  const getViewer = useCallback(() => {\n    const viewerProps = { gfxProps: completeGfxProps(props.gfxProps), axiom: currentAxiom}\n    return viewerType === \"3d\" ? <LSImageViewer2D {...viewerProps} />: <LSImageViewer3D {...viewerProps} />\n  }, [ props.gfxProps, currentAxiom, viewerType])\n\n  useEffect( () => {\n    setAllCurrentAxioms(props.lSystem.getAllIterationsAsObject())\n    setCurrentIteration(props.lSystem.iterations);\n  }, [ props.lSystem, props.lSystem.iterations])\n\n  useEffect( () => {\n    setCurrentAxiom(allCurrentAxioms[currentIteration]);\n  }, [currentIteration, allCurrentAxioms])\n\n  useEffect(() => {\n    const newViewerType = getViewerType(props.lSystem, props.gfxProps);\n    setViewerType(newViewerType);\n  }, [props.lSystem, props.gfxProps])\n\n\n  const stopIterationAnimation = () => {\n    console.log(\"Anim stop\", currentIteration);\n    currentlyAnimating.current = false;\n  }\n  const startIterationAnimation = () => {\n    console.log(\"Anim start\");\n    currentlyAnimating.current = true;\n    setCurrentIteration(0);\n  }\n  useEffect(() => {\n    console.log(\"Current iteration changed\");\n    if (currentIteration === props.lSystem.iterations || currentlyAnimating.current == false) {\n      stopIterationAnimation();\n    } else {\n      setTimeout(() => setCurrentIteration(currentIteration +1), 100);\n    }\n  }, [currentIteration, props.lSystem.iterations])\n\n\n  return (\n    <div>\n      viewer: {viewerType} , iterations: {currentIteration}, animate:\n      {currentlyAnimating.current === true ? (\n        <span onClick={() => stopIterationAnimation()} className=\"clickable\"> stop </span>\n      ) : (\n        <span onClick={() => startIterationAnimation()} className=\"clickable\"> start </span>\n      )}\n      {getViewer()}\n    </div>\n  );\n}\n\nexport default LSImageViewerController\n// const viewerType = getViewerType(props.lSystem, props.gfxProps)\n// const viewerProps = { gfxProps: completeGfxProps(props.gfxProps) , axiom: props.lSystem.getIterationAsObject()}\n\n// return (\n//   <div>\n//     viewer: {viewerType}\n//     iterations: { props.lSystem.iterations}\n//     {viewerType === \"3d\" ? <LSImageViewer3D {...viewerProps} /> : <LSImageViewer2D {...viewerProps}/>  }\n\n//   </div>\n// )","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/LSImageViewer3D.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/LSImageViewer2D.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/drawChar.ts",["111"],"import p5 from \"p5\";\nimport { ParamsValue } from \"@bvk/lsystem\";\n\nexport const draw2DChar = (p : p5, char: string, l: number, a: number, params: ParamsValue | undefined) => {\n  if (!p) return;\n  switch (char) {\n    case \"F\":\n      p.line(0, 0, l, 0);\n      p.translate(l, 0);\n      break;\n    case \"f\":\n      p.translate(l, 0);\n      break;\n    case \"+\":\n      p.rotate(a);\n      break;\n    case \"-\":\n      p.rotate(-a);\n      break;\n    case \"[\":\n      p.push()\n      break;\n    case \"]\":\n      p.pop();\n      break;\n    case \"E\":\n      p.ellipse(0, 0, l, l);\n      break;\n    case \"!\":\n      p.strokeWeight(l)\n      break;\n    case \"~\":\n      p.rotate(Math.random() * a);\n      break;\n    case \"#\":\n      if (!l || l == 0) p.stroke(0, 0, 0);\n      else {\n        let h = params && params[0] ? parseFloat(params[0] as string) : 0;\n        let s = params && params[1] ? parseFloat(params[1] as string) : 100;\n        let b = params && params[2] ? parseFloat(params[2] as string) : 100;\n        p.stroke(h, s, b);\n      }\n      break;\n    default:\n      console.log(char + \" isn't turtle command\");\n  }\n}\n\nexport const draw3DChar = (p: p5, char: string, l: number, a: number, params: ParamsValue | undefined) => {\n  if (!p) return\n  switch (char) {\n    case \"F\":\n      p.line(0, 0, 0, l);\n      p.translate(0, l);\n      break;\n    case \"f\":\n      p.translate(0, l);\n      break;\n    case \"[\":\n      p.push();\n      break;\n    case \"]\":\n      p.pop();\n      break;\n    //Here: Yaw is around Z axis, giving you +/- on the YX plane \n    //What that means, is a 2d curve will be drawn on the YX plane  \n    case \"+\":\n      p.rotateZ(a);\n      break;\n    case \"-\":\n      p.rotateZ(-a);\n      break;\n    //PITCH is around X axis, giving you &/^ (pitch down/up) \n    //So pitching up down gives you rotation \"up/down\" w.r.t to up axis \n    case \"&\":\n      p.rotateX(a);\n      break;\n    case \"^\":\n      p.rotateX(-a)\n      break;\n    //ROLL is around Y axis, gives you a roll around itself\n    //Without any PITCH, Roll is meaningless for a line (just rolls around itself)\n    case '\\'':\n      p.rotateY(a);\n      break;\n    case '/':\n      p.rotateY(-a);\n      break;\n    case \"E\":\n      if (params && params[1]) {\n        p.fill(parseFloat(params[1] as string), 100,100 );\n      }\n      p.ellipse(0, 0, l, l);\n      p.noFill();\n      break;\n    case \"!\":\n      p.strokeWeight(l)\n      break;\n    case \"~\":\n      p.rotateX(Math.random() * a);\n      p.rotateY(Math.random() * a);\n      p.rotateZ(Math.random() * a);\n      break;\n    case \"#\":\n      p.stroke(l, 100, 100);\n      break;\n    case \"M\":\n      draw3DModel(p, params)\n      break;\n    default:\n      //console.log(char + \" isn't turtle command\");\n      break;\n    }\n  }\n\nconst draw3DModel = (p:p5, params: ParamsValue | undefined) => {\n  let scaleValue = params && params[0] ? parseFloat(params[0] as string) : 0.1;\n  p.push();\n  //p.specularMaterial(255);\n  p.scale(scaleValue);\n  p.box(100);\n  p.pop();\n}","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/LSImageViewerBasic.tsx",[],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":4,"column":8,"nodeType":"118","messageId":"119","endLine":4,"endColumn":16},{"ruleId":"116","severity":1,"message":"120","line":4,"column":29,"nodeType":"118","messageId":"119","endLine":4,"endColumn":37},{"ruleId":"121","severity":1,"message":"122","line":43,"column":40,"nodeType":"123","messageId":"124","endLine":43,"endColumn":42},{"ruleId":"116","severity":1,"message":"125","line":69,"column":9,"nodeType":"118","messageId":"119","endLine":69,"endColumn":15},{"ruleId":"121","severity":1,"message":"122","line":70,"column":40,"nodeType":"123","messageId":"124","endLine":70,"endColumn":42},{"ruleId":"121","severity":1,"message":"122","line":105,"column":40,"nodeType":"123","messageId":"124","endLine":105,"endColumn":42},{"ruleId":"116","severity":1,"message":"126","line":3,"column":38,"nodeType":"118","messageId":"119","endLine":3,"endColumn":50},{"ruleId":"116","severity":1,"message":"127","line":3,"column":52,"nodeType":"118","messageId":"119","endLine":3,"endColumn":63},{"ruleId":"116","severity":1,"message":"128","line":7,"column":10,"nodeType":"118","messageId":"119","endLine":7,"endColumn":31},{"ruleId":"129","severity":1,"message":"130","line":28,"column":37,"nodeType":"131","messageId":"132","endLine":28,"endColumn":38,"suggestions":"133"},{"ruleId":"121","severity":1,"message":"122","line":76,"column":85,"nodeType":"123","messageId":"124","endLine":76,"endColumn":87},{"ruleId":"134","severity":1,"message":"135","line":81,"column":6,"nodeType":"136","endLine":81,"endColumn":50,"suggestions":"137"},{"ruleId":"121","severity":1,"message":"122","line":36,"column":19,"nodeType":"123","messageId":"124","endLine":36,"endColumn":21},"no-native-reassign",["138"],"no-negated-in-lhs",["139"],"@typescript-eslint/no-unused-vars","'P5Turtle' is defined but never used.","Identifier","unusedVar","'GFXProps' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'mouseX' is assigned a value but never used.","'P5CanvasType' is defined but never used.","'renderTypes' is defined but never used.","'createImportSpecifier' is defined but never used.","no-useless-escape","Unnecessary escape character: \\/.","TemplateElement","unnecessaryEscape",["140","141"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'stopIterationAnimation'. Either include it or remove the dependency array.","ArrayExpression",["142"],"no-global-assign","no-unsafe-negation",{"messageId":"143","fix":"144","desc":"145"},{"messageId":"146","fix":"147","desc":"148"},{"desc":"149","fix":"150"},"removeEscape",{"range":"151","text":"152"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"153","text":"154"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [currentIteration, props.lSystem.iterations, stopIterationAnimation]",{"range":"155","text":"156"},[919,920],"",[919,919],"\\",[2948,2992],"[currentIteration, props.lSystem.iterations, stopIterationAnimation]"]