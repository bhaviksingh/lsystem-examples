[{"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/index.tsx":"1","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSPreview.tsx":"2","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/EditorPage.tsx":"3","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/utils.ts":"4","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditor.tsx":"5","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSCustomizer.tsx":"6","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer.tsx":"7","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSDraw/P5Turtle3D.tsx":"8","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSDraw/P5Turtle.tsx":"9","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSDraw/P5TurtlePixel.tsx":"10","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/ExamplesPage.tsx":"11","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/Examples/Lilac.tsx":"12","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/Examples/TextGarden.tsx":"13","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/Examples/Webpage.tsx":"14","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/worker/index.ts":"15","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/worker/worker.ts":"16"},{"size":1076,"mtime":1612293297193,"results":"17","hashOfConfig":"18"},{"size":4222,"mtime":1612219206140,"results":"19","hashOfConfig":"18"},{"size":1386,"mtime":1612218573308,"results":"20","hashOfConfig":"18"},{"size":2780,"mtime":1611966469018,"results":"21","hashOfConfig":"18"},{"size":1474,"mtime":1612129574895,"results":"22","hashOfConfig":"18"},{"size":13448,"mtime":1612290797064,"results":"23","hashOfConfig":"18"},{"size":1352,"mtime":1612219006804,"results":"24","hashOfConfig":"18"},{"size":3632,"mtime":1612218863488,"results":"25","hashOfConfig":"18"},{"size":5567,"mtime":1612218990694,"results":"26","hashOfConfig":"18"},{"size":2373,"mtime":1612218834639,"results":"27","hashOfConfig":"18"},{"size":3816,"mtime":1620881620411,"results":"28","hashOfConfig":"18"},{"size":3058,"mtime":1612292003479,"results":"29","hashOfConfig":"18"},{"size":2609,"mtime":1612218476679,"results":"30","hashOfConfig":"18"},{"size":2839,"mtime":1612294396875,"results":"31","hashOfConfig":"18"},{"size":139,"mtime":1620881065402,"results":"32","hashOfConfig":"18"},{"size":251,"mtime":1620881429888,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"doautr",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/index.tsx",[],["74","75"],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSPreview.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/EditorPage.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/utils.ts",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditor.tsx",["76"],"import React from \"react\";\nimport LSystem from \"@bvk/lsystem\";\nimport LSCustomizer from \"./LSCustomizer\";\nimport P5Turtle from \"./LSDraw/P5Turtle\";\nimport { GFXProps, LSProps } from \"./utils\";\nimport LSViewer from \"./LSViewer\";\n\n\n/* LSEditor.ts\n* This class is a combination of an LSCustomizer and an LSViewer\n* It manages updates from the customizer, and mantains LS/GFXProps to pass into the viewer.\n* */\ninterface LSEditorState {\n  LSystem: LSystem | undefined,\n  gfxProps?: GFXProps\n}\ninterface LSEditorProps {\n  initLSProps: LSProps\n  initGFXProps?: GFXProps\n}\nexport default class LSEditor extends React.Component<LSEditorProps, LSEditorState> {\n  state: LSEditorState = {\n      LSystem: undefined,\n      gfxProps: this.props.initGFXProps || {}\n  }\n  onLSIterated = (LS: LSystem) => {\n      this.setState({ LSystem: LS })\n  }\n  onLSReset = (LS: LSystem) => {\n      this.setState({ LSystem: LS });\n  }\n  onGFXPropsUpdated = (gfxProps: GFXProps) => {\n      this.setState({gfxProps: gfxProps});\n  }\n  render() {\n      return (\n      <div className=\"side-by-side\">\n          <LSCustomizer\n          onLSIterated={this.onLSIterated}\n          onLSReset={this.onLSReset}\n          onGFXPropsUpdate={this.onGFXPropsUpdated}\n          initLSProps={this.props.initLSProps}\n          initGFXProps={this.props.initGFXProps}\n          key=\"LSCustomizer\"\n          />\n          <LSViewer LSystem={this.state.LSystem} gfxProps={this.state.gfxProps}/>\n      </div >\n      )\n    }\n}\n\n","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSCustomizer.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer.tsx",["77","78"],"import LSystem from \"@bvk/lsystem\";\nimport React from \"react\"\nimport { findAllInRenderedTree } from \"react-dom/test-utils\";\nimport P5Turtle from \"./LSDraw/P5Turtle\";\nimport P5Turtle3D from \"./LSDraw/P5Turtle3D\";\nimport P5TurtlePixel from \"./LSDraw/P5TurtlePixel\";\nimport {GFXProps} from \"./utils\"\n\n/* LSViewer.ts\n* This class shows a given LSystem and GFXProps (through Props) in every renderer\n* It is used primarily by LSEditor.\n* */\ninterface myProps {\n  LSystem: LSystem | undefined;\n  gfxProps?: GFXProps\n}\nexport default class LSViewer extends React.Component<myProps>{\n  \n  render() {\n    return (\n      <div className=\"canvas-border stack border\"> \n        <P5Turtle key=\"gfx-viewer\" LSystem={this.props.LSystem} GFXProps={this.props.gfxProps} />        \n        <P5Turtle3D key=\"gfx-3d-viewer\" LSystem={this.props.LSystem} GFXProps={this.props.gfxProps}/>\n        {/* <P5TurtlePixel key=\"gfx-pixel-view\" LSystem={this.props.LSystem} GFXProps={this.props.gfxProps}/> */}\n        <div key=\"text-viewer\"> {LSText(this.props.LSystem)} </div>\n      </div>\n    )\n  }\n}\n\nexport function LSText(LSystem: LSystem | undefined) {\n  if (!LSystem) return \"LSystem doesnt exist\"\n  let text = LSystem.getAllIterationsAsString();\n  let textDivs = text.map((val, index) => (\n    <li>  {val}  </li>\n  ));\n  return <ol style={{width: \"100%\"}}> {textDivs} </ol>\n}","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSDraw/P5Turtle3D.tsx",["79","80","81","82"],"import { ParamsValue } from \"@bvk/lsystem\";\nimport p5 from \"p5\";\nimport P5Turtle from \"./P5Turtle\";\n\nexport default class P5Turtle3D extends P5Turtle {\n  canvasType : \"webgl\" | \"p2d\" = \"webgl\";\n  models : p5.Geometry[] = [];\n  private cameraPos: number[] | undefined;\n  private cameraNum = 0;\n\n  rotateToUp = () => {\n    let p = this.p5Context;\n    if (p) p.rotate(-180);\n  }\n  preload = (p: p5) => {\n   \n  }\n  moveToCenter = () => {\n    //Do nothing, were already there\n    let p = this.p5Context;\n    if (!p) return;\n    if (!this.cameraPos)  this.cameraPos = [0, 0, p.height/2];\n    p.camera(this.cameraPos[0], this.cameraPos[1], this.cameraPos[2], 0, 0, 0, 0, 1, 0);\n  }\n  drawChar = (char: string, l: number, a: number, params: ParamsValue | undefined) => {\n    let p = this.p5Context;\n    if (!p) return\n    switch (char) {\n      case \"F\":\n        p.line(0, 0, 0, l);\n        p.translate(0, l);\n        break;\n      case \"f\":\n        p.translate(0, l);\n        break;\n      case \"[\":\n        p.push();\n        break;\n      case \"]\":\n        p.pop();\n        break;\n      //Here: Yaw is around Z axis, giving you +/- on the YX plane \n      //What that means, is a 2d curve will be drawn on the YX plane  \n      case \"+\":\n        p.rotateZ(a);\n        break;\n      case \"-\":\n        p.rotateZ(-a);\n        break;\n      //PITCH is around X axis, giving you &/^ (pitch down/up) \n      //So pitching up down gives you rotation \"up/down\" w.r.t to up axis \n      case \"&\":\n        p.rotateX(a);\n        break;\n      case \"^\":\n        p.rotateX(-a)\n        break;\n      //ROLL is around Y axis, gives you a roll around itself\n      //Without any PITCH, Roll is meaningless for a line (just rolls around itself)\n      case '\\'':\n        p.rotateY(a);\n        break;\n      case '/':\n        p.rotateY(-a);\n        break;\n      case \"E\":\n        if (params && params[1]) {\n          p.fill(parseFloat(params[1] as string), 100,100 );\n        }\n        p.ellipse(0, 0, l, l);\n        p.noFill();\n        break;\n      case \"!\":\n        p.strokeWeight(l)\n        break;\n      case \"~\":\n        p.rotateX(Math.random() * a);\n        p.rotateY(Math.random() * a);\n        p.rotateZ(Math.random() * a);\n        break;\n      case \"#\":\n        p.stroke(l, 100, 100);\n        break;\n      case \"M\":\n        this.drawModel(p, params)\n        break;\n      default:\n        //console.log(char + \" isn't turtle command\");\n        break;\n      }\n    }\n\n  drawModel = (p:p5, params: ParamsValue | undefined) => {\n    let scaleValue = params && params[0] ? parseFloat(params[0] as string) : 0.1;\n    p.push();\n    //p.specularMaterial(255);\n    p.scale(scaleValue);\n    p.box(100);\n    p.pop();\n  }\n  moveCamera = () => {\n    if (!this.p5Context) return;\n    let displacement = this.p5Context.height / 2;\n    if (this.cameraNum == 0) {\n      this.cameraPos = [0, 0, displacement];\n    }\n    if (this.cameraNum == 1) {\n      this.cameraPos = [displacement, 30, 0];\n    }\n    if (this.cameraNum == 2) {\n      this.cameraPos = [0, 0, -displacement];\n    }\n    if (this.cameraNum == 3) {\n      this.cameraPos = [-displacement, 0, 0];\n    }\n    this.cameraNum = this.cameraNum + 1;\n    this.cameraNum = this.cameraNum > 3 ? 0 : this.cameraNum;\n    //this.cameraPos[1] += 30;\n  }\n\n  render() {\n    return (\n      <div className=\"stack smaller\">\n        <div>\n          <span className=\"clickable\" onClick={(e) => {this.moveCamera(); this.redraw()}}> rotate me </span> \n          <span className=\"clickable\" onClick={() => this.startIterationAnimation()}> animate growth </span>\n        </div>\n        <div ref={this.containerRef} />\n      </div>\n    )\n  }\n\n}\n","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSDraw/P5Turtle.tsx",["83","84","85"],"import React from \"react\"\nimport p5 from \"p5\"\nimport LSystem, { Axiom, Params, ParamsValue } from \"@bvk/lsystem\";\nimport { GFXProps } from \"../utils\";\n\ninterface myProps {\n  LSystem: LSystem | undefined;\n  GFXProps?: GFXProps\n}\nexport default class P5Turtle extends React.Component<myProps> {\n  p5Context: p5 | undefined;\n  containerRef = React.createRef<HTMLDivElement>();\n  canvasType : \"webgl\" | \"p2d\" = \"p2d\";\n  iterateAnimationIndex : undefined | number;\n  walkthroughAnimationIndex: undefined | number;\n  currentDrawCommand: Axiom | undefined;\n  animationSpeed: number = 100;\n  customRules: {[key: string]: (p:p5, params: ParamsValue | undefined) => void} = {}\n\n  constructor(props: myProps) {\n    super(props);\n    this.drawChar = this.drawChar.bind(this);\n    this.redraw = this.redraw.bind(this);\n  }\n  componentDidMount() {\n    if (this.containerRef.current)\n      new p5(this.sketch, this.containerRef.current);\n  }\n  componentDidUpdate() {\n    this.redraw();\n  }\n  preload = (p :p5) => {\n\n  }\n  sketch = (p: p5) => {\n \n    p.setup = () => {\n      p.createCanvas(this.props.GFXProps?.width || 600, this.props.GFXProps?.height || 600, this.canvasType);\n      p.angleMode(p.DEGREES);\n      p.colorMode(p.HSB);\n      p.noLoop();\n      p.textFont(\"monospace \", 12);\n      p.strokeCap(\"butt\")\n      //p.strokeCap(p.SQUARE)\n      this.preload(p);\n      this.p5Context = p;\n      this.redraw();\n    };\n    p.draw = () => {\n\n    }\n  };\n  componentWillUnmount = () => {\n    this.p5Context?.remove();\n    this.p5Context = undefined;\n  }\n  redraw() {\n    if (this.p5Context !== undefined) {\n      this.p5Context?.clear();\n      this.p5Context?.background(255, 0, 255,0);\n      this.drawCS();\n      this.p5Context?.noLoop();\n    } else {\n      console.log(\"Couldnt redraw\");\n      console.log(this.p5Context);\n    }\n  }\n  animateIterations = () => {\n    if (this.props.LSystem?.iterations === undefined || this.iterateAnimationIndex === undefined) {\n      console.log(\"Cant animate\");\n      return;\n    }\n    if (this.iterateAnimationIndex > this.props.LSystem?.iterations) {\n      console.log(\"Animation finished\");\n      this.iterateAnimationIndex = undefined;\n      return;\n    }\n    \n    let allIterations = this.props.LSystem.getAllIterationsAsObject();\n    let currentIteration = allIterations[this.iterateAnimationIndex];\n    this.currentDrawCommand = currentIteration;\n    this.redraw();\n    this.iterateAnimationIndex++;\n    setTimeout(this.animateIterations, this.animationSpeed);\n  }\n  startIterationAnimation = () => {\n    this.walkthroughAnimationIndex = undefined;\n    this.iterateAnimationIndex = 0;\n    this.animateIterations();\n  }\n  setDefaults = (p: p5) => {\n    let center = this.props.GFXProps?.center !== undefined ? [p.width * this.props.GFXProps?.center[0], p.height * this.props.GFXProps?.center[1]] : [0, 0];\n    let sw = this.props.GFXProps?.strokeWeight ? this.props.GFXProps?.strokeWeight : 1;\n    let defaultLength = this.props.GFXProps?.length ? this.props.GFXProps?.length : 0.01 * p.height;\n    let defaultAngle = this.props.GFXProps?.angle ? this.props.GFXProps?.angle : 90;\n    return {center, sw, defaultLength, defaultAngle}\n  }\n  drawCS = () => {\n    if (this.props.LSystem !== undefined) {\n      //Setup drawing\n      let cS = this.currentDrawCommand || this.props.LSystem.getIterationAsObject();\n      let p = this.p5Context as p5;\n\n      //Setup default values \n      let {center, sw, defaultLength, defaultAngle} = this.setDefaults(p);\n\n      //Begin drawing\n      p.push();\n      this.moveToCenter()\n      p.translate(center[0], center[1], 0);\n\n      this.rotateToUp();\n      p.noFill();\n      p.stroke(0, 0, 0);\n      p.strokeWeight(sw);\n      \n      let steps = cS.length;\n      for (let i = 0; i < steps; i++) {\n        let letter = cS[i];\n        let char = letter.symbol;\n        let params = letter.params;\n        let param = letter.params && letter.params.length == 1 ? letter.params[0] + \"\" : undefined;\n        let val = param && !isNaN(parseFloat(param)) ? parseFloat(param) : undefined\n        this.drawChar(char, val || defaultLength, val || defaultAngle, params);\n      }\n      p.pop();\n      p.noLoop();\n    }\n  }\n  rotateToUp = () => {\n    let p = this.p5Context;\n    if (p) p.rotate(-90);\n  }\n  moveToCenter = () => {\n    let p = this.p5Context;\n    if (p) p.translate(p.width / 2, p.height / 2);\n  }\n  drawChar(char: string, l: number, a: number, params: ParamsValue | undefined) {\n    let p = this.p5Context;\n    if (!p) return;\n    switch (char) {\n      case \"F\":\n        p.line(0, 0, l, 0);\n        p.translate(l, 0);\n        break;\n      case \"f\":\n        p.translate(l, 0);\n        break;\n      case \"+\":\n        p.rotate(a);\n        break;\n      case \"-\":\n        p.rotate(-a);\n        break;\n      case \"[\":\n        p.push()\n        break;\n      case \"]\":\n        p.pop();\n        break;\n      case \"E\":\n        p.ellipse(0, 0, l, l);\n        break;\n      case \"!\":\n        p.strokeWeight(l)\n        break;\n      case \"~\":\n        p.rotate(Math.random() * a);\n        break;\n      case \"#\":\n        if (!l || l==0)  p.stroke(0,0,0);\n        else p.stroke(l, 100, 100);\n        break;\n      default:\n        if (this.customRules[char]) {\n          this.customRules[char](p,params);\n        }\n      //console.log(char + \" isn't turtle command\");\n    }\n  }\n\n  render() {\n    return (<div className=\"stack small\">\n      <div>\n        <span className=\"clickable\" onClick={() => this.startIterationAnimation()} > animate growth </span>\n      </div>\n      <div ref={this.containerRef} />\n    </div>)\n  }\n\n}\n","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSDraw/P5TurtlePixel.tsx",["86"],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/ExamplesPage.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/Examples/Lilac.tsx",["87"],"import LSystem, { ParamsValue } from \"@bvk/lsystem\"\nimport p5 from \"p5\"\nimport P5Turtle3D from \"../LSDraw/P5Turtle3D\"\nimport { CompleteLSExample, GFXProps } from \"../utils\"\n\nconst lilacData: CompleteLSExample = {\n  name: \"lilac\",\n  lsProps: {\n    axiom: \"!(0.9) #(120) [ -(44)  ^(20) F(50) AK ] \",\n    productions: [\n      \"A: P I(0) /(90)  A\",\n      \"I(t) {t!=2}:  F I(t+1)\",\n      \"I(t) {t==2}: ^(rnd(5,15)) #(rnd(60,150)) I(t+1)[-(45)FFA][+(45)FFA][FFA]\",\n      \"P: [-(45)/(45)K][+(45)/(45)K]\",\n      \"K: [F #(100) F [~ M(0.05)]]\",\n      \"M(s) {s<0.1}: M(s+0.05)\",\n      \"M(s) {s>=0.1}: M(0.1)\"\n    ],\n    iterations: 16,\n  },\n  gfxProps: {\n    length: 3,\n    renderType: [\"3d\"],\n    width: 1200,\n    height: 850,\n    angle: 8\n  },\n};\nexport default function Lilac() {\n  let ls =  new LSystem(lilacData.lsProps.axiom, lilacData.lsProps.productions, lilacData.lsProps.iterations);\n  let gfxProps = lilacData.gfxProps; \n\n  return (\n    <div > \n      <DrawLilac LSystem={ls} GFXProps={gfxProps} /> \n      \n    </div>)\n}\n\nconst flowerHue = 325;  \nclass DrawLilac extends P5Turtle3D {\n  windAngle = 0;\n  animationSpeed = 600;\n  preload = (p: p5) => {\n    p.loadModel(\n      process.env.PUBLIC_URL + \"/assets/lily-flat.obj\",\n      true,\n      (m) => {\n        this.models.push(m);\n        this.startIterationAnimation()\n      },\n      (e) => {\n        console.log(\"Fail to load model\");\n      }\n    );\n  }\n  moveToCenter = () => {\n    //Do nothing, were already there\n    let p = this.p5Context;\n    if (!p) return;\n    p.background(200, 100,100,0.0);\n    \n    let pos = [-180,-150,-320];\n    p.ambientLight(flowerHue - 95, 80, 100);\n    p.pointLight(flowerHue, 80, 90, -500, -500, -900);\n    p.pointLight(flowerHue + 200, 80, 65, 200, 200, -300);\n    \n    p.camera(pos[0], pos[1], pos[2], pos[0], pos[1],0, 0,1,0);\n    \n  }\n  simulateWind = () => {\n    let maxBlows = Math.floor(Math.random() * 100 + 20);\n    for (var i = 0; i < maxBlows; i++) {\n      setTimeout(() => {\n        this.redraw();\n      }, i * 100);\n    }\n  }\n  drawModel = (p:p5, params: ParamsValue | undefined) => {\n    let scaleValue = params && params[0] ? parseFloat(params[0] as string) : 0.1;\n    let model = this.models[0];\n    if (!model) return;\n    p.push();\n\n    p.noStroke();\n    p.fill(100,100,100);   \n    p.specularMaterial(flowerHue,0,100)\n    p.scale(scaleValue);\n    p.model(model);\n    p.pop();\n  }\n  moveCamera = () => {\n    //Do nothing\n  }\n  render() {\n    return (\n      <div style={{backgroundImage: \"linear-gradient(white 30%, rgb(255,220,250))\"}}>\n        <div\n          style={{\n            position: \"fixed\",\n            top: \"12px\",\n            right: \"12px\",\n            width: \"24px\",\n            height: \"24px\",\n            borderRadius: \"100%\",\n            cursor: \"ne-resize\",\n            background: \"rgb(250,120,200)\"\n          }}\n          onClick={() => this.startIterationAnimation()}\n        >\n          {\" \"}\n        </div>\n        <div onClick={(e) => this.simulateWind()} ref={this.containerRef} style={{marginLeft: \"10%\"}}/>\n      </div>\n    );\n  }\n}","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/Examples/TextGarden.tsx",["88","89"],"import LSystem, { ParamsValue } from \"@bvk/lsystem\";\nimport p5 from \"p5\";\nimport P5Turtle from \"../LSDraw/P5Turtle\";\nimport { CompleteLSExample } from \"../utils\";\n\n\nconst textFlower: CompleteLSExample = {\n  name: \"textFlower\",\n  lsProps: {\n    axiom: \"[S] \",\n    productions: [\n      \"S: A(rnd(5,10))\",\n      \"A(a) {a>=1}: F B(0) B(1) + A(a-1)\",\n      \"B(b) {b==0}: [+(75) F(20) f(10) T(0)]\",\n      \"B(b) {b==1}: [-(75) F(20) f(50) +(180) T(1)]\",\n      \"A(a) {a<1}: FFFF -(120) P(rnd(8,19))\",\n      \"P(p) {p>0}: [F(40) f(10) T(2)] [+(rnd(40,60)) P(p-1)]\",\n      \"P(p) {p==0}: X\"\n    ],\n    iterations: 30,\n  },\n  gfxProps: {\n    length: 40,\n    renderType: [\"2d\"],\n    width: 600,\n    height: 760,\n    angle: 5,\n    center: [0,0.4],\n  },\n};\n\nconst text = [{t:\"you\", s: 16},{t:\"thank\", s:16}, {t:\"☼\", s: 18}]\nconst defaultText = {t: \"\", s: 12};\n\nexport default function textGarden() {\n  let ls = new LSystem(textFlower.lsProps.axiom, textFlower.lsProps.productions, textFlower.lsProps.iterations);\n  let gfxProps = textFlower.gfxProps\n  console.log(ls.getAllIterationsAsString());\n\n  return (<TextTurtle LSystem={ls} GFXProps={gfxProps}/>)\n}\nfunction drawText(p: p5, params: ParamsValue | undefined) {\n  let index =  params && params.length == 1 ? parseInt(params[0]  as string) : -1;\n  let textObj = index > -1 ? text[index] : defaultText;\n  p.push();\n  p.noStroke();\n  p.fill(0,0,0);\n  p.textSize(textObj.s);\n  p.text(textObj.t, 0,0);\n  p.pop();\n}\n\nclass TextTurtle extends P5Turtle {\n  xPercent = 1;\n  preload = (p:p5) => { \n    p.textFont(\"helvetica\");\n  }\n  setDefaults = (p: p5) => {\n    let center = this.props.GFXProps?.center !== undefined ? [p.width * this.props.GFXProps?.center[0], p.height * this.props.GFXProps?.center[1]] : [0, 0];\n    let sw = this.props.GFXProps?.strokeWeight ? this.props.GFXProps?.strokeWeight : 1;\n    let defaultLength = this.props.GFXProps?.length ? this.props.GFXProps?.length : 0.01 * p.height;\n    let defaultAngle = this.xPercent * 5;\n    return {center, sw, defaultLength, defaultAngle}\n  }\n  customRules = {\n    \"T\": drawText \n  }\n  mouseMove = (e: React.MouseEvent) => {\n    let mouseX = e.pageX;\n    let mousePercentage = e.pageX / window.innerWidth - 0.5;\n    console.log(mousePercentage);\n    this.xPercent = mousePercentage;\n    this.redraw();\n  }\n  render() {\n    return (\n    <div onMouseMove={this.mouseMove} className=\"full-bleed\" style={{backgroundImage: \"linear-gradient(white 80%, rgba(140,255,100,0.6))\"}} >\n      <div ref={this.containerRef} style={{display: \"inline-block\", marginLeft: \"50%\", transform: \"translate(-50%, 0)\"}}/>\n    </div>)\n  }\n}\n\n","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/Examples/Webpage.tsx",["90","91"],"import LSystem, { ParamsValue } from \"@bvk/lsystem\";\nimport p5 from \"p5\";\nimport P5Turtle from \"../LSDraw/P5Turtle\";\nimport { CompleteLSExample } from \"../utils\";\n\nlet webData : CompleteLSExample = {\n  lsProps: {\n    axiom: \"A(15)\", \n    productions: [\"A(a):f(a)+B(a)A(a+1)\", \"B(b):[-(90)ffT(b-15)]  [+(90) fff -(90) P(b-20)]\"],\n    iterations: 48\n  },\n  gfxProps: {\n    angle: 5,\n    length: 5,\n    width: 2000,\n    height: 800,\n    center: [-0.18,0.2]\n  }\n}\n\nexport default function WebPage() {\n  let ls = new LSystem(webData.lsProps.axiom, webData.lsProps.productions, webData.lsProps.iterations);\n  let gfxProps = webData.gfxProps;\n  return <WebTurtle LSystem={ls} GFXProps={gfxProps}/>\n}\n\n\nconst text = [\"Alt social \",\n\"Starry night - rhizome \",\n\"Run your own social \",\n\"Special fish\",\n\"Petals network\",\n\"cyberspace and as space\",\n\"Mastodon\",\n\"Feminist community networks \",\n\"Echo\",\n\"This is Fine: Optimism & Emergency in the P2P Network\",\n\"Distributed Web of Care\",\n\"PeerToPeerWeb / Dat\",\n\"Consentful Tech\",\n\"Rediscovering the small web\",\n\"Zonelets: \",\n\"Cozy web/extended internet universe\",\n\"Small web / site.js\",\n\"NYC mesh \",\n\"History of communication \",\n\"Black gooey universe \",\n\"Hand made web \",\n\"Hundred rabbits\",\n\"Dark Study \",\n\"Tiny tools list (everest pipkin)\",\n\"Wonderful world of weird creative tools \",\n\"Glyph Drawing Club\",\n\"Programs | Emergent Works\",\n\"Casual creation tools - a paper \",\n\"SQLLite story\",\n\"Jeffrey Alan schuder\",\n\"Picrew: Create avatars\",\n\"coming age of calm tech - xerox parc\",\n\"The rise of the ambient video game\",\n\"Using the internet mindfully\",\n\"Soft.works\",\n\"hardlyeverything.co\",\n\"How to grow an idea\",]\n\nconst defaultText = \"\";\n\n\nfunction drawText(p: p5, params: ParamsValue | undefined) {\n  let index =  params && params.length == 1 ? parseInt(params[0]  as string) : -1;\n  let textObj = index > -1 ? text[index] : defaultText;\n  p.push();\n  p.noStroke();\n  p.fill(230,100,100);\n  p.textSize(12);\n  p.textStyle()\n  p.text(textObj, 0,0);\n  p.pop();\n}\n\nconst t2 = [\"m\",\n\"y\",\n\" \",\n\"f\",\n\"a\",\n\"v\",\n\"o\",\n\"r\",\n\"i\",\n\"t\",\n\"e\",\n\" \",\n\"r\",\n\"e\",\n\"f\",\n\"e\",\n\"r\",\n\"e\",\n\"n\",\n\"c\",\n\"e\",\n\"s\", ]\n\nfunction drawText2(p: p5, params: ParamsValue | undefined) {\n  let index =  params && params.length == 1 ? parseInt(params[0]  as string) : -1;\n  let textObj = index > -1 && index < t2.length ? t2[index] : defaultText;\n  p.push();\n  p.noStroke();\n  p.fill(0,0,0);\n  p.textSize(14);\n  p.textStyle()\n  p.text(textObj, 0,0);\n  p.pop();\n}\n\nclass WebTurtle extends P5Turtle {\n\n  animationSpeed = 1000;\n  preload = (p:p5) => { \n    //p.textFont(\"consolas\");\n  }\n  customRules = {\n    \"T\": drawText,\n    \"P\": drawText2\n  }\n\n  render() {\n    return (\n    <div className=\"full-bleed\"  >\n      <div ref={this.containerRef} style={{display: \"inline-block\", marginLeft: \"50%\", transform: \"translate(-50%, 0)\"}}/>\n    </div>)\n  }\n}\n\n","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/worker/index.ts",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/worker/worker.ts",[],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":4,"column":8,"nodeType":"98","messageId":"99","endLine":4,"endColumn":16},{"ruleId":"96","severity":1,"message":"100","line":3,"column":10,"nodeType":"98","messageId":"99","endLine":3,"endColumn":31},{"ruleId":"96","severity":1,"message":"101","line":6,"column":8,"nodeType":"98","messageId":"99","endLine":6,"endColumn":21},{"ruleId":"102","severity":1,"message":"103","line":104,"column":24,"nodeType":"104","messageId":"105","endLine":104,"endColumn":26},{"ruleId":"102","severity":1,"message":"103","line":107,"column":24,"nodeType":"104","messageId":"105","endLine":107,"endColumn":26},{"ruleId":"102","severity":1,"message":"103","line":110,"column":24,"nodeType":"104","messageId":"105","endLine":110,"endColumn":26},{"ruleId":"102","severity":1,"message":"103","line":113,"column":24,"nodeType":"104","messageId":"105","endLine":113,"endColumn":26},{"ruleId":"96","severity":1,"message":"106","line":3,"column":26,"nodeType":"98","messageId":"99","endLine":3,"endColumn":32},{"ruleId":"102","severity":1,"message":"103","line":122,"column":59,"nodeType":"104","messageId":"105","endLine":122,"endColumn":61},{"ruleId":"102","severity":1,"message":"103","line":171,"column":20,"nodeType":"104","messageId":"105","endLine":171,"endColumn":22},{"ruleId":"96","severity":1,"message":"107","line":24,"column":9,"nodeType":"98","messageId":"99","endLine":24,"endColumn":10},{"ruleId":"96","severity":1,"message":"108","line":4,"column":29,"nodeType":"98","messageId":"99","endLine":4,"endColumn":37},{"ruleId":"102","severity":1,"message":"103","line":43,"column":40,"nodeType":"104","messageId":"105","endLine":43,"endColumn":42},{"ruleId":"96","severity":1,"message":"109","line":69,"column":9,"nodeType":"98","messageId":"99","endLine":69,"endColumn":15},{"ruleId":"102","severity":1,"message":"103","line":70,"column":40,"nodeType":"104","messageId":"105","endLine":70,"endColumn":42},{"ruleId":"102","severity":1,"message":"103","line":105,"column":40,"nodeType":"104","messageId":"105","endLine":105,"endColumn":42},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"@typescript-eslint/no-unused-vars","'P5Turtle' is defined but never used.","Identifier","unusedVar","'findAllInRenderedTree' is defined but never used.","'P5TurtlePixel' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Params' is defined but never used.","'p' is assigned a value but never used.","'GFXProps' is defined but never used.","'mouseX' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]