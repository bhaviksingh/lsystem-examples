[{"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/index.tsx":"1","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSPreview.tsx":"2","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/EditorPage.tsx":"3","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/utils.ts":"4","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/ExamplesPage.tsx":"5","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/worker/index.ts":"6","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/worker/worker.ts":"7","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSTextViewer.tsx":"8","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSAllViewer.tsx":"9","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/index.ts":"10","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/Examples/Lilac.tsx":"11","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/Examples/TextGarden.tsx":"12","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/Examples/Webpage.tsx":"13","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/index.tsx":"14","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/LSImageViewerController.tsx":"15","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/LSImageViewer3D.tsx":"16","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/LSImageViewer2D.tsx":"17","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/drawChar.ts":"18","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/LSImageViewerBasic.tsx":"19","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditAndView.tsx":"20","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditor/LSEditor.tsx":"21","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditor/LSStatusConsole.tsx":"22","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditor/LSCodeEditor.tsx":"23","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditor/LSGFXEditor.tsx":"24","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/FavoritePage.tsx":"25","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditor/codeSyntax.tsx":"26","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/PageLayout.tsx":"27","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/data/examples.ts":"28"},{"size":1176,"mtime":1631910910493,"results":"29","hashOfConfig":"30"},{"size":4218,"mtime":1633119842860,"results":"31","hashOfConfig":"30"},{"size":1240,"mtime":1631910770845,"results":"32","hashOfConfig":"30"},{"size":2877,"mtime":1633116962686,"results":"33","hashOfConfig":"30"},{"size":1206,"mtime":1632524209923,"results":"34","hashOfConfig":"30"},{"size":728,"mtime":1633116196723,"results":"35","hashOfConfig":"30"},{"size":654,"mtime":1627852181355,"results":"36","hashOfConfig":"30"},{"size":365,"mtime":1627853312579,"results":"37","hashOfConfig":"30"},{"size":702,"mtime":1631911807937,"results":"38","hashOfConfig":"30"},{"size":260,"mtime":1629488918289,"results":"39","hashOfConfig":"30"},{"size":3146,"mtime":1629489276811,"results":"40","hashOfConfig":"30"},{"size":2258,"mtime":1629489086180,"results":"41","hashOfConfig":"30"},{"size":2963,"mtime":1629489084742,"results":"42","hashOfConfig":"30"},{"size":282,"mtime":1629488885977,"results":"43","hashOfConfig":"30"},{"size":5614,"mtime":1633132161737,"results":"44","hashOfConfig":"30"},{"size":2805,"mtime":1633137036813,"results":"45","hashOfConfig":"30"},{"size":1018,"mtime":1632800684164,"results":"46","hashOfConfig":"30"},{"size":2973,"mtime":1631045417779,"results":"47","hashOfConfig":"30"},{"size":5248,"mtime":1633135990621,"results":"48","hashOfConfig":"30"},{"size":1707,"mtime":1631912449057,"results":"49","hashOfConfig":"30"},{"size":7613,"mtime":1633119510675,"results":"50","hashOfConfig":"30"},{"size":1996,"mtime":1633116909990,"results":"51","hashOfConfig":"30"},{"size":1317,"mtime":1633117659168,"results":"52","hashOfConfig":"30"},{"size":2187,"mtime":1631912276861,"results":"53","hashOfConfig":"30"},{"size":787,"mtime":1631911101838,"results":"54","hashOfConfig":"30"},{"size":3097,"mtime":1633120568655,"results":"55","hashOfConfig":"30"},{"size":783,"mtime":1631912008855,"results":"56","hashOfConfig":"30"},{"size":2605,"mtime":1632439789481,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1r4qygr",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"60"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"60"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"60"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"60"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"60"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"60"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/index.tsx",[],["127","128"],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSPreview.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/EditorPage.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/utils.ts",["129"],"import p5 from \"p5\";\nimport queryString from \"query-string\"\n\n\n\nexport const defaultLSData = {\n  axiom: \"A\",\n  productionText: [\"A:FA\"],\n  iterations: 10\n}\n\nexport type P5CanvasType = \"webgl\" | \"p2d\"\nexport type renderTypes = \"2d\" | \"3d\" | \"text\" | \"pixel\";\n\nexport interface CompleteLSExample {\n  lsProps: LSProps\n  gfxProps?: GFXProps\n  name?: string\n}\n\nexport interface LSStatus {\n  state : \"compiling\" | \"compiled\" | \"error\" | \"ready\",\n  errors?: Error[]\n}\nexport interface LSProps {\n  axiom: string\n  productions: string[]\n  iterations: number\n}\n\nexport interface GFXPropsComplete {\n  renderType: renderTypes[]\n  length: number\n  angle: number\n  center: number[]\n  width: number\n  height: number\n  strokeWeight: number\n  backgroundColor: string\n  animationWaitTime: number,\n  iterations: number\n}\n\nconst defaultGFXProps: GFXPropsComplete = {\n  renderType: [\"2d\"],\n  length: 10,\n  angle: 30,\n  center: [0,0],\n  width: 600,\n  height: 600,\n  strokeWeight: 1,\n  backgroundColor:\"#eee\",\n  animationWaitTime: 500,\n  iterations: 1\n}\n\nexport const completeGfxProps = (gfxProps: GFXProps | undefined) : GFXPropsComplete => {\n  if ( gfxProps === undefined) return defaultGFXProps\n  return {...defaultGFXProps, ...gfxProps};\n}\n\nexport type GFXProps = Partial<GFXPropsComplete>\n\n\nexport function flattenLSProps(ls: LSProps, delimiter: string) {\n  let stringArr = [ls.axiom, ...ls.productions];\n  return stringArr.reduce((str, t) => str + t + delimiter, \"\")\n}\n\nfunction cleanParam(o: string | string[]): string {\n  if (o instanceof Array) {\n    return o[0] as string\n  }\n  else return o as string\n}\nexport function decodeParams(paramString: string): {lsProps: LSProps, gfxProps?: GFXProps} {\n  const parsed = queryString.parse(paramString);\n  let axiom = parsed.a ? cleanParam(parsed.a) : defaultLSData.axiom;\n  let iterations = parsed.i ? parseFloat(cleanParam(parsed.i)) : defaultLSData.iterations;\n  let productions = defaultLSData.productionText;\n  if (parsed.p) productions = parsed.p instanceof Array ? parsed.p : [cleanParam(parsed.p)];  \n  let gfxProps : GFXProps = {};\n  if (parsed.length || parsed.angle) {\n    if (parsed.length) gfxProps.length = parseFloat(cleanParam(parsed.length));\n    if (parsed.angle) gfxProps.angle = parseFloat(cleanParam(parsed.angle))\n    if (parsed.c0) gfxProps.center = [parseFloat(cleanParam(parsed.c0)),0];\n    if (parsed.c1) gfxProps.center = [gfxProps.center ? gfxProps.center[0] : 0, parseFloat(cleanParam(parsed.c1))];\n  }\n  return {lsProps: {axiom: axiom, iterations: iterations, productions: productions}, gfxProps: gfxProps};\n} \n\nexport function encodeParams(lsProps: Partial<LSProps>, gfxProps?: GFXProps) {\n\n  const fullProps = gfxProps  ? { ls: {...lsProps}, gfx: {...gfxProps}} : {ls: lsProps};\n\n  const urlString = queryString.stringify(fullProps);\n  console.log(\"Stringifying props into querystring\" + urlString, fullProps);\n\n  return urlString;\n  // let axiomString = lsProps.axiom ? \"a=\" + encodeURIComponent(lsProps.axiom) : \"a=\";\n  // let iterationString = lsProps.iterations ? \"&i=\" + encodeURIComponent(lsProps.iterations) : \"\";\n  // let productionString = lsProps.productions ? lsProps.productions.reduce((str, p) => str + \"&p=\" + encodeURIComponent(p), \"\") : \"\";\n  \n  \n  // let gfxPropsString = \"\"; \n  // if (gfxProps) {\n  //   if (gfxProps.length) {\n  //     gfxPropsString += \"&length=\" + encodeURIComponent(gfxProps.length);\n  //   }\n  //   if (gfxProps.angle) {\n  //     gfxPropsString += \"&angle=\" + encodeURIComponent(gfxProps.angle);\n  //   }\n  //   if(gfxProps.center) {\n  //     gfxPropsString += \"&c0=\" + encodeURIComponent(gfxProps.center[0]) + \"&c1=\" + encodeURIComponent(gfxProps.center[1])\n  //   }\n  // }\n  // let paramString =  \"?\" + axiomString + productionString + iterationString + gfxPropsString;\n  // return paramString;\n}","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/ExamplesPage.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/worker/index.ts",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/worker/worker.ts",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSTextViewer.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSAllViewer.tsx",["130","131"],"import LSystem from \"@bvk/lsystem\";\nimport React from \"react\";\nimport { completeGfxProps, GFXProps } from \"../utils\";\nimport LSImageViewer from \"./LSImageViewer\";\nimport LSTextViewer from \"./LSTextViewer\";\n\n/* LSViewer.ts\n * This class shows a given LSystem and GFXProps (through Props) in every renderer\n * It is used primarily by LSEditor.\n * */\ninterface myProps {\n  LSystem: LSystem | undefined;\n  gfxProps?: GFXProps;\n}\nexport default class LSAllViewer extends React.Component<myProps> {\n  render() {\n    return this.props.LSystem ? (\n      <div className=\"canvas-border stack border\">\n        {/* <LSImageViewer key=\"image-viewer\" lSystem={this.props.LSystem} gfxProps={this.props.gfxProps} /> */}\n        <div key=\"text-viewer\" className=\"black-border\" style={{ width: \"600px\", height: \"600px\" }}>\n          {LSTextViewer(this.props.LSystem)}\n        </div>\n      </div>\n    ) : (\n      \"No L-System activated yet\"\n    );\n  }\n}\n","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/index.ts",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/Examples/Lilac.tsx",["132"],"import LSystem, { ParamsValue } from \"@bvk/lsystem\"\nimport p5 from \"p5\"\nimport LSImageViewer3D from \"../../components/LSViewer/LSImageViewer3D\"\nimport { CompleteLSExample, GFXProps } from \"../../components/utils\"\n\nconst lilacData: CompleteLSExample = {\n  name: \"lilac\",\n  lsProps: {\n    axiom: \"!(0.9) #(120) [ -(44)  ^(20) F(50) AK ] \",\n    productions: [\n      \"A: P I(0) /(90)  A\",\n      \"I(t) {t!=2}:  F I(t+1)\",\n      \"I(t) {t==2}: ^(rnd(5,15)) #(rnd(60,150)) I(t+1)[-(45)FFA][+(45)FFA][FFA]\",\n      \"P: [-(45)/(45)K][+(45)/(45)K]\",\n      \"K: [F #(100) F [~ M(0.05)]]\",\n      \"M(s) {s<0.1}: M(s+0.05)\",\n      \"M(s) {s>=0.1}: M(0.1)\"\n    ],\n    iterations: 16,\n  },\n  gfxProps: {\n    length: 3,\n    renderType: [\"3d\"],\n    width: 1200,\n    height: 850,\n    angle: 8\n  },\n};\nexport default function Lilac() {\n  let ls =  new LSystem(lilacData.lsProps.axiom, lilacData.lsProps.productions, lilacData.lsProps.iterations);\n  let gfxProps = lilacData.gfxProps; \n\n  return (\n    <div > \n      <DrawLilac LSystem={ls} GFXProps={gfxProps} /> \n      \n    </div>)\n}\n\nconst flowerHue = 325;  \nclass DrawLilac extends LSImageViewer3D {\n  windAngle = 0;\n  animationSpeed = 600;\n  preload = (p: p5) => {\n    p.loadModel(\n      process.env.PUBLIC_URL + \"/assets/lily-flat.obj\",\n      true,\n      (m) => {\n        this.models.push(m);\n        this.startIterationAnimation()\n      },\n      (e) => {\n        console.log(\"Fail to load model\");\n      }\n    );\n  }\n  moveToCenter = () => {\n    //Do nothing, were already there\n    let p = this.p5Context;\n    if (!p) return;\n    p.background(200, 100,100,0.0);\n    \n    let pos = [-180,-150,-320];\n    p.ambientLight(flowerHue - 95, 80, 100);\n    p.pointLight(flowerHue, 80, 90, -500, -500, -900);\n    p.pointLight(flowerHue + 200, 80, 65, 200, 200, -300);\n    \n    p.camera(pos[0], pos[1], pos[2], pos[0], pos[1],0, 0,1,0);\n    \n  }\n  simulateWind = () => {\n    let maxBlows = Math.floor(Math.random() * 100 + 20);\n    for (var i = 0; i < maxBlows; i++) {\n      setTimeout(() => {\n        this.redraw();\n      }, i * 100);\n    }\n  }\n  drawModel = (p:p5, params: ParamsValue | undefined) => {\n    let scaleValue = params && params[0] ? parseFloat(params[0] as string) : 0.1;\n    let model = this.models[0];\n    if (!model) return;\n    p.push();\n\n    p.noStroke();\n    p.fill(100,100,100);   \n    p.specularMaterial(flowerHue,0,100)\n    p.scale(scaleValue);\n    p.model(model);\n    p.pop();\n  }\n  moveCamera = () => {\n    //Do nothing\n  }\n  render() {\n    return (\n      <div style={{backgroundImage: \"linear-gradient(white 30%, rgb(255,220,250))\"}}>\n        <div\n          style={{\n            position: \"fixed\",\n            top: \"12px\",\n            right: \"12px\",\n            width: \"24px\",\n            height: \"24px\",\n            borderRadius: \"100%\",\n            cursor: \"ne-resize\",\n            background: \"rgb(250,120,200)\"\n          }}\n          onClick={() => this.startIterationAnimation()}\n        >\n          {\" \"}\n        </div>\n        <div onClick={(e) => this.simulateWind()} ref={this.containerRef} style={{marginLeft: \"10%\"}}/>\n      </div>\n    );\n  }\n}","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/Examples/TextGarden.tsx",["133","134"],"import LSystem, { ParamsValue } from \"@bvk/lsystem\";\nimport p5 from \"p5\";\nimport LSImageViewer2D from \"../../components/LSViewer/LSImageViewer2D\";\nimport { CompleteLSExample } from \"../../components/utils\";\n\n\nconst textFlower: CompleteLSExample = {\n  name: \"textFlower\",\n  lsProps: {\n    axiom: \"[S] \",\n    productions: [\n      \"S: A(rnd(5,10))\",\n      \"A(a) {a>=1}: F B(0) B(1) + A(a-1)\",\n      \"B(b) {b==0}: [+(75) F(20) f(10) T(0)]\",\n      \"B(b) {b==1}: [-(75) F(20) f(50) +(180) T(1)]\",\n      \"A(a) {a<1}: FFFF -(120) P(rnd(8,19))\",\n      \"P(p) {p>0}: [F(40) f(10) T(2)] [+(rnd(40,60)) P(p-1)]\",\n      \"P(p) {p==0}: X\"\n    ],\n    iterations: 30,\n  },\n  gfxProps: {\n    length: 40,\n    renderType: [\"2d\"],\n    width: 600,\n    height: 760,\n    angle: 5,\n    center: [0,0.4],\n  },\n};\n\nconst text = [{t:\"you\", s: 16},{t:\"thank\", s:16}, {t:\"☼\", s: 18}]\nconst defaultText = {t: \"\", s: 12};\n\nexport default function textGarden() {\n  let ls = new LSystem(textFlower.lsProps.axiom, textFlower.lsProps.productions, textFlower.lsProps.iterations);\n  let gfxProps = textFlower.gfxProps\n  console.log(ls.getAllIterationsAsString());\n\n  return (<TextTurtle LSystem={ls} GFXProps={gfxProps}/>)\n}\nfunction drawText(p: p5, params: ParamsValue | undefined) {\n  let index =  params && params.length == 1 ? parseInt(params[0]  as string) : -1;\n  let textObj = index > -1 ? text[index] : defaultText;\n  p.push();\n  p.noStroke();\n  p.fill(0,0,0);\n  p.textSize(textObj.s);\n  p.text(textObj.t, 0,0);\n  p.pop();\n}\n\nclass TextTurtle extends LSImageViewer2D {\n  xPercent = 1;\n  preload = (p:p5) => { \n    p.textFont(\"helvetica\");\n  }\n  setDefaults = (p: p5) => {\n    let center = this.props.GFXProps?.center !== undefined ? [p.width * this.props.GFXProps?.center[0], p.height * this.props.GFXProps?.center[1]] : [0, 0];\n    let sw = this.props.GFXProps?.strokeWeight ? this.props.GFXProps?.strokeWeight : 1;\n    let defaultLength = this.props.GFXProps?.length ? this.props.GFXProps?.length : 0.01 * p.height;\n    let defaultAngle = this.xPercent * 5;\n    return {center, sw, defaultLength, defaultAngle}\n  }\n  customRules = {\n    \"T\": drawText \n  }\n  mouseMove = (e: React.MouseEvent) => {\n    let mouseX = e.pageX;\n    let mousePercentage = e.pageX / window.innerWidth - 0.5;\n    console.log(mousePercentage);\n    this.xPercent = mousePercentage;\n    this.redraw();\n  }\n  render() {\n    return (\n    <div onMouseMove={this.mouseMove} className=\"full-bleed\" style={{backgroundImage: \"linear-gradient(white 80%, rgba(140,255,100,0.6))\"}} >\n      <div ref={this.containerRef} style={{display: \"inline-block\", marginLeft: \"50%\", transform: \"translate(-50%, 0)\"}}/>\n    </div>)\n  }\n}\n\n","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/Examples/Webpage.tsx",["135","136"],"import LSystem, { ParamsValue } from \"@bvk/lsystem\";\nimport p5 from \"p5\";\nimport LSImageViewer2D from \"../../components/LSViewer/LSImageViewer2D\";\nimport { CompleteLSExample } from \"../../components/utils\";\n\nlet webData : CompleteLSExample = {\n  lsProps: {\n    axiom: \"A(15)\", \n    productions: [\"A(a):f(a)+B(a)A(a+1)\", \"B(b):[-(90)ffT(b-15)]  [+(90) fff -(90) P(b-20)]\"],\n    iterations: 48\n  },\n  gfxProps: {\n    angle: 5,\n    length: 5,\n    width: 2000,\n    height: 800,\n    center: [-0.18,0.2]\n  }\n}\n\nexport default function WebPage() {\n  let ls = new LSystem(webData.lsProps.axiom, webData.lsProps.productions, webData.lsProps.iterations);\n  let gfxProps = webData.gfxProps;\n  return <WebTurtle LSystem={ls} GFXProps={gfxProps}/>\n}\n\n\nconst text = [\"Alt social \",\n\"Starry night - rhizome \",\n\"Run your own social \",\n\"Special fish\",\n\"Petals network\",\n\"cyberspace and as space\",\n\"Mastodon\",\n\"Feminist community networks \",\n\"Echo\",\n\"This is Fine: Optimism & Emergency in the P2P Network\",\n\"Distributed Web of Care\",\n\"PeerToPeerWeb / Dat\",\n\"Consentful Tech\",\n\"Rediscovering the small web\",\n\"Zonelets: \",\n\"Cozy web/extended internet universe\",\n\"Small web / site.js\",\n\"NYC mesh \",\n\"History of communication \",\n\"Black gooey universe \",\n\"Hand made web \",\n\"Hundred rabbits\",\n\"Dark Study \",\n\"Tiny tools list (everest pipkin)\",\n\"Wonderful world of weird creative tools \",\n\"Glyph Drawing Club\",\n\"Programs | Emergent Works\",\n\"Casual creation tools - a paper \",\n\"SQLLite story\",\n\"Jeffrey Alan schuder\",\n\"Picrew: Create avatars\",\n\"coming age of calm tech - xerox parc\",\n\"The rise of the ambient video game\",\n\"Using the internet mindfully\",\n\"Soft.works\",\n\"hardlyeverything.co\",\n\"How to grow an idea\",]\n\nconst defaultText = \"\";\n\n\nfunction drawText(p: p5, params: ParamsValue | undefined) {\n  let index =  params && params.length == 1 ? parseInt(params[0]  as string) : -1;\n  let textObj = index > -1 ? text[index] : defaultText;\n  p.push();\n  p.noStroke();\n  p.fill(230,100,100);\n  p.textSize(12);\n  p.textStyle()\n  p.text(textObj, 0,0);\n  p.pop();\n}\n\nconst t2 = [\"m\",\n\"y\",\n\" \",\n\"f\",\n\"a\",\n\"v\",\n\"o\",\n\"r\",\n\"i\",\n\"t\",\n\"e\",\n\" \",\n\"r\",\n\"e\",\n\"f\",\n\"e\",\n\"r\",\n\"e\",\n\"n\",\n\"c\",\n\"e\",\n\"s\", ]\n\nfunction drawText2(p: p5, params: ParamsValue | undefined) {\n  let index =  params && params.length == 1 ? parseInt(params[0]  as string) : -1;\n  let textObj = index > -1 && index < t2.length ? t2[index] : defaultText;\n  p.push();\n  p.noStroke();\n  p.fill(0,0,0);\n  p.textSize(14);\n  p.textStyle()\n  p.text(textObj, 0,0);\n  p.pop();\n}\n\nclass WebTurtle extends LSImageViewer2D {\n\n  animationSpeed = 1000;\n  preload = (p:p5) => { \n    //p.textFont(\"consolas\");\n  }\n  customRules = {\n    \"T\": drawText,\n    \"P\": drawText2\n  }\n\n  render() {\n    return (\n    <div className=\"full-bleed\"  >\n      <div ref={this.containerRef} style={{display: \"inline-block\", marginLeft: \"50%\", transform: \"translate(-50%, 0)\"}}/>\n    </div>)\n  }\n}\n\n","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/index.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/LSImageViewerController.tsx",["137","138","139","140","141"],"import React, {useCallback, useRef, useState} from \"react\";\nimport LSystem, { Axiom } from \"@bvk/lsystem\";\nimport { completeGfxProps, GFXProps } from \"../../utils\";\nimport LSImageViewer2D from \"./LSImageViewer2D\";\nimport LSImageViewer3D from \"./LSImageViewer3D\";\nimport { useEffect } from \"react\";\nimport { axiomToStr } from \"@bvk/lsystem/dist/parser\";\n\n\ninterface LSImageViewerControllerProps {\n  lSystem: LSystem,\n  gfxProps?: GFXProps,\n  animationEnabled?: boolean,\n  swaprenderStyleEnabled?: boolean\n}\n\ntype ImageRenderTypes = \"2d\" | \"3d\";\n\nfunction charIs3D(l: string) {\n  \n  let is3D = l == \"&\" || l == \"^\" || l == \"/\" || l == \"\\\\\";\n  console.log(\"Checking 3d \" + l + \" returning \" + is3D);\n  return is3D;\n}\nfunction getViewerType(lSystem: LSystem, gfxProps?: GFXProps) : ImageRenderTypes {\n  console.log(\"VIEWER TYPE SETUP IS...\", gfxProps)\n  if (gfxProps && gfxProps.renderType && ! gfxProps.renderType.includes(\"auto\")) {\n    if (gfxProps.renderType.includes(\"2d\")) \n      return \"2d\"\n    if (gfxProps.renderType.includes(\"3d\")) \n      return \"3d\"\n  }\n  for (let i =0; i<lSystem.axiom.length; i++) {\n    if (charIs3D(lSystem.axiom[i].symbol)) {\n      return \"3d\"\n    }\n  }\n  for (let i =0; i<lSystem.productions.length; i++) {\n    let p = lSystem.productions[i];\n    let successors = Array.isArray(p.successor) ? p.successor : [p.successor]; \n    for (let j = 0; j<successors.length; j++) {\n      let s = successors[j];\n      for (let k = 0; k<s.letters.length; k++) {\n        if (charIs3D(s.letters[k].symbol)) {\n          return \"3d\"\n        }\n      }\n    }\n  }\n  lSystem.productions.forEach((p) => {\n   let successors = Array.isArray(p.successor) ? p.successor : [p.successor];\n    successors.forEach( (s) => {\n      s.letters.forEach((l) => {\n        if (charIs3D(l.symbol))\n        return \"3d\"\n      })\n    })\n  })\n  return \"2d\"  \n}\n\n/**\n * Component to manage viewing an LSystem as an image.\n * NOTE: IF the Lsystem has not been \"iterated\", this component will iterate it on the main thread. It is recommended to iterate before initializing component\n * @param props \n * @returns \n */\nconst LSImageViewerController : React.FunctionComponent<LSImageViewerControllerProps> = (props) => {\n\n  const [viewerType, setViewerType] = useState<ImageRenderTypes>( getViewerType(props.lSystem, props.gfxProps));\n  const [currentAxiom, setCurrentAxiom] = useState<Axiom>();\n  const [allCurrentAxioms, setAllCurrentAxioms] = useState<Axiom[]>();\n  const [currentIteration, setCurrentIteration] = useState<number>(props.lSystem.iterations);\n\n  const currentlyAnimating = useRef<boolean>(false);\n  const activeInterval = useRef<NodeJS.Timeout>();\n\n  //Trigger re-render if the gxfProps, current axiom, or viewer type change\n  const getViewer = useCallback(() => {\n    if (currentAxiom) {\n      const viewerProps = { gfxProps: completeGfxProps(props.gfxProps), axiom: currentAxiom };\n      console.log(\"HERE WE GO, RENDERING NOW WITH \", viewerType);\n      return viewerType === \"2d\" ? (\n        <LSImageViewer2D {...viewerProps} key=\"control ler-viewer-2d\" />\n      ) : (\n        <LSImageViewer3D {...viewerProps} key=\"controller-viewer-3d\" />\n      );\n    }\n  }, [ props.gfxProps, currentAxiom, viewerType])\n\n  //When the lsystem changes, cancel any anim timers and set current iterations + all current axioms\n  useEffect( () => {\n    console.log(\"🏠🏠 i am alive\")\n    if (activeInterval.current) clearTimeout(activeInterval.current);\n    setCurrentIteration(props.lSystem.iterations);\n    setAllCurrentAxioms(props.lSystem.getAllIterationsAsObject())\n  }, [ props.lSystem, props.lSystem.iterations])\n\n  //When the currentIteration or all current Axioms change, change current axiom (trigger-re-render)\n  useEffect( () => {\n    console.log(\"🏠🏠🏠🏠🏠🏠🏠🏠🏠🏠 Changing axiom... should re-render\")\n    if (allCurrentAxioms)\n      setCurrentAxiom(allCurrentAxioms[currentIteration]);\n  }, [currentIteration, allCurrentAxioms])\n\n  //If ls or gfx props change, viewer type may change\n  useEffect(() => {\n    const newViewerType = getViewerType(props.lSystem, props.gfxProps) ;\n    console.log(\"💖💖💖💖💖 Changing LSystem or GFX props, should guess viewer type\", newViewerType)\n    setViewerType(newViewerType);\n  }, [props.lSystem, props.gfxProps])\n\n\n  //Helper functions for animations\n  const stopIterationAnimation = () => {\n    console.log(\"Anim stop\", currentIteration);\n    currentlyAnimating.current = false;\n  }\n  const startIterationAnimation = () => {\n    console.log(\"Anim start\");\n    currentlyAnimating.current = true;\n    setCurrentIteration(0);\n  }\n  //Animation is just powered by changes to currentIteration.\n  //The currentIteration changes itself every x seconds.\n  //STOP IF:  the LS changes the iters set to the stopping point OR forced stop \n  useEffect(() => {\n    console.log(\"Current iteration changed\", currentIteration);\n    \n    if (currentIteration === props.lSystem.iterations || currentlyAnimating.current === false) {\n      stopIterationAnimation();\n    } else {\n      activeInterval.current = setTimeout(() => setCurrentIteration(currentIteration +1), props.gfxProps?.animationWaitTime || completeGfxProps(undefined).animationWaitTime);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentIteration])\n\n\n\n  return (\n    <div className=\"stack no-gap\">\n      <div className=\"toolbar horizontal-stack edit-surface border-bottom\">\n        <span> viewer: {viewerType}  </span> \n        <span> iterations: {currentIteration} </span>\n        {currentlyAnimating.current === true ? (\n          <span onClick={() => stopIterationAnimation()} className=\"clickable\"> stop </span>\n        ) : (\n          <span onClick={() => startIterationAnimation()} className=\"clickable\"> start </span>\n        )}\n      </div>\n      {getViewer()}\n    </div>\n  );\n}\n\nexport default LSImageViewerController\n","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/LSImageViewer3D.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/LSImageViewer2D.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/drawChar.ts",["142"],"import p5 from \"p5\";\nimport { ParamsValue } from \"@bvk/lsystem\";\n\nexport const draw2DChar = (p : p5, char: string, l: number, a: number, params: ParamsValue | undefined) => {\n  if (!p) return;\n  switch (char) {\n    case \"F\":\n      p.line(0, 0, l, 0);\n      p.translate(l, 0);\n      break;\n    case \"f\":\n      p.translate(l, 0);\n      break;\n    case \"+\":\n      p.rotate(a);\n      break;\n    case \"-\":\n      p.rotate(-a);\n      break;\n    case \"[\":\n      p.push()\n      break;\n    case \"]\":\n      p.pop();\n      break;\n    case \"E\":\n      p.ellipse(0, 0, l, l);\n      break;\n    case \"!\":\n      p.strokeWeight(l)\n      break;\n    case \"~\":\n      p.rotate(Math.random() * a);\n      break;\n    case \"#\":\n      if (!l || l == 0) p.stroke(0, 0, 0);\n      else {\n        let h = params && params[0] ? parseFloat(params[0] as string) : 0;\n        let s = params && params[1] ? parseFloat(params[1] as string) : 100;\n        let b = params && params[2] ? parseFloat(params[2] as string) : 100;\n        p.stroke(h, s, b);\n      }\n      break;\n    default:\n      console.log(char + \" isn't turtle command\");\n  }\n}\n\nexport const draw3DChar = (p: p5, char: string, l: number, a: number, params: ParamsValue | undefined) => {\n  if (!p) return\n  switch (char) {\n    case \"F\":\n      p.line(0, 0, 0, l);\n      p.translate(0, l);\n      break;\n    case \"f\":\n      p.translate(0, l);\n      break;\n    case \"[\":\n      p.push();\n      break;\n    case \"]\":\n      p.pop();\n      break;\n    //Here: Yaw is around Z axis, giving you +/- on the YX plane \n    //What that means, is a 2d curve will be drawn on the YX plane  \n    case \"+\":\n      p.rotateZ(a);\n      break;\n    case \"-\":\n      p.rotateZ(-a);\n      break;\n    //PITCH is around X axis, giving you &/^ (pitch down/up) \n    //So pitching up down gives you rotation \"up/down\" w.r.t to up axis \n    case \"&\":\n      p.rotateX(a);\n      break;\n    case \"^\":\n      p.rotateX(-a)\n      break;\n    //ROLL is around Y axis, gives you a roll around itself\n    //Without any PITCH, Roll is meaningless for a line (just rolls around itself)\n    case '\\'':\n      p.rotateY(a);\n      break;\n    case '/':\n      p.rotateY(-a);\n      break;\n    case \"E\":\n      if (params && params[1]) {\n        p.fill(parseFloat(params[1] as string), 100,100 );\n      }\n      p.ellipse(0, 0, l, l);\n      p.noFill();\n      break;\n    case \"!\":\n      p.strokeWeight(l)\n      break;\n    case \"~\":\n      p.rotateX(Math.random() * a);\n      p.rotateY(Math.random() * a);\n      p.rotateZ(Math.random() * a);\n      break;\n    case \"#\":\n      p.stroke(l, 100, 100);\n      break;\n    case \"M\":\n      draw3DModel(p, params)\n      break;\n    default:\n      //console.log(char + \" isn't turtle command\");\n      break;\n    }\n  }\n\nconst draw3DModel = (p:p5, params: ParamsValue | undefined) => {\n  let scaleValue = params && params[0] ? parseFloat(params[0] as string) : 0.1;\n  p.push();\n  //p.specularMaterial(255);\n  p.scale(scaleValue);\n  p.box(100);\n  p.pop();\n}","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/LSImageViewerBasic.tsx",["143"],"import React from \"react\"\nimport {  GFXPropsComplete, P5CanvasType } from \"../../utils\";\nimport {Axiom} from \"@bvk/lsystem\"\nimport p5 from \"p5\";\nimport ReactScrollWheelHandler from \"react-scroll-wheel-handler\";\n\n//Props should control all the things coming into the viewer\nexport interface LSImageViewerBasicProps {\n  axiom: Axiom | undefined,\n  gfxProps: GFXPropsComplete\n}\n\n//State should control anything needed for the panning + zooming \nexport interface LSImageViewerBasicState {\n  localScale: number\n}\n\n\nexport default class LSImageViewerBasic extends React.Component<LSImageViewerBasicProps, LSImageViewerBasicState> {\n\n  p5Context: p5 | undefined\n  containerRef = React.createRef<HTMLDivElement>();\n  canvasType : P5CanvasType = \"p2d\"\n  canvasID : string = \"P5-BASIC-CANVAS\" \n\n  constructor(props: LSImageViewerBasicProps) {\n    super(props);\n    //TODO: When to bind\n    this.state = {\n      localScale: 1\n    }\n  }\n  componentDidMount() {\n    if (this.containerRef.current) \n      new p5(this.sketch, this.containerRef.current);\n  }\n  componentDidUpdate() {\n    this.redraw();\n  }\n\n  defaultSetup = (p: p5) => {\n    let cnv = p.createCanvas(this.props.gfxProps.width, this.props.gfxProps.height, this.canvasType);\n    cnv.id(this.canvasID);\n    p.angleMode(p.DEGREES);\n    p.colorMode(p.HSB);\n    p.noLoop();\n    p.textFont(\"monospace \", 12);\n    p.strokeCap(\"butt\")\n  }\n  preload = (p: p5) => {\n    //Do nothing in the base case\n  }\n  redraw = () => {\n    console.log(\"Redrawing graphic\");\n    if (this.p5Context !== undefined) {\n      this.p5Context.clear();\n      this.p5Context.background(this.props.gfxProps.backgroundColor);\n      this.drawCurrentGraphic(this.p5Context);\n      this.p5Context?.noLoop();\n    } else {\n      console.log(\"Couldnt redraw\");\n      console.log(this.p5Context);\n    }\n  }\n  moveToCanvasCenter = (p: p5) => {\n    if (!p) return\n    p.translate(p.width / 2, p.height / 2);\n  }\n  scaleToZoomLevel = (p: p5) => {\n    if (!p) return;\n    p.scale(this.state.localScale);\n  }\n  rotateToUp = (p : p5) => {\n    if (p) p.rotate(-90);\n  }\n  drawCurrentGraphic = (p:p5) => {\n    p.push();\n    this.moveToCanvasCenter(p);\n    this.scaleToZoomLevel(p);\n    p.translate(this.props.gfxProps.center[0] * p.width, this.props.gfxProps.center[1] * p.height);\n    this.rotateToUp(p);\n    this.drawCurrentAxiom(p);\n    p.pop();\n  }\n  drawCurrentAxiom = (p: p5) => {\n    p.fill(Math.random() * 100 , 100 , 100);\n    p.ellipse(0,0,100,100);\n  }\n  startIterationAnimation = () => {\n    //TODO\n  }\n  sketch = (p: p5) => {\n \n    p.setup = () => {\n      this.defaultSetup(p);\n      this.preload(p);\n      this.p5Context = p;\n      this.redraw();\n    };\n    p.draw = () => {\n\n    }\n  };\n  handleZoom = (zoomAmount: number) => {\n    console.log(\"🤝🤝🤝🤝🤝 z00o000m\");\n    console.log(zoomAmount);\n    if (zoomAmount && zoomAmount !== 0) {\n      let scale = this.state.localScale;\n      let amtChange = 1;\n      scale = zoomAmount > 0 ? scale + amtChange  : Math.max(scale - amtChange, 0.1);\n      console.log(\"Setting new scale\" + scale);\n      this.setState({localScale: scale})\n    }\n  }\n  getCanvasControls = (): JSX.Element[] => {\n\n    return [\n      <div className=\"clickable\" onClick={(e) => this.handleZoom(+1)}> \n        + \n      </div>,\n      <div className=\"clickable\" onClick={(e) => this.handleZoom(-1)}> \n       - \n      </div>\n    ]\n  }\n  render() {\n    return (\n      <div style={{position: \"relative\"}}>\n        <div style={{position: \"absolute\", right: 0, top: 0, zIndex: 2}}> {this.getCanvasControls()} </div>\n        <div ref={this.containerRef} />\n      </div>\n    );\n  }\n}","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditAndView.tsx",["144"],"import React from \"react\";\nimport LSystem from \"@bvk/lsystem\";\nimport LSCustomizer from \"./LSEditor/LSCustomizer\";\nimport { GFXProps, LSProps } from \"./utils\";\nimport LSAllViewer from \"./LSViewer\";\nimport { LSEditor } from \"./LSEditor/LSEditor\";\n\n\n/* LSEditor.ts\n* This class is a combination of an LSCustomizer and an LSViewer\n* It manages updates from the customizer, and mantains LS/GFXProps to pass into the viewer.\n* */\ninterface LSEditorState {\n  LSystem: LSystem | undefined,\n  gfxProps?: GFXProps\n}\ninterface LSEditorProps {\n  initLSProps: LSProps\n  initGFXProps?: GFXProps\n}\nexport default class LSEditAndView extends React.Component<LSEditorProps, LSEditorState> {\n  state: LSEditorState = {\n      LSystem: undefined,\n      gfxProps: this.props.initGFXProps || {}\n  }\n  onLSIterated = (LS: LSystem) => {\n      this.setState({ LSystem: LS })\n  }\n  onLSReset = (LS: LSystem) => {\n      this.setState({ LSystem: LS });\n  }\n  onGFXPropsUpdated = (gfxProps: GFXProps) => {\n      this.setState({gfxProps: gfxProps});\n  }\n  render() {\n      return (\n        <div className=\"side-by-side\">\n          <LSEditor\n            onLSReset={this.onLSReset}\n            onLSIterated={this.onLSIterated}\n            onGFXPropsUpdate={this.onGFXPropsUpdated}\n          />\n          <LSAllViewer LSystem={this.state.LSystem} gfxProps={this.state.gfxProps} />\n        </div>\n      );\n    }\n}\n\n","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditor/LSEditor.tsx",["145","146","147"],"\n\nimport LSystem, {  parseAxiom, parseProduction } from \"@bvk/lsystem\"\nimport React, { useCallback, useState } from \"react\"\nimport { useEffect } from \"react\";\nimport {completeGfxProps, decodeParams, encodeParams, GFXProps, GFXPropsComplete, LSProps, LSStatus} from \"../utils\"\nimport { createLSInWorker } from \"../worker\";\nimport LSConsole from \"./LSStatusConsole\";\nimport LSCodeEditor from \"./LSCodeEditor\";\nimport { GFXPropsCustomizer } from \"./LSGFXEditor\";\nimport { useRef } from \"react\";\nimport { lineIsComment, splitLines } from \"./codeSyntax\";\nimport copy from \"copy-to-clipboard\"\nimport base64 from \"base-64\";\n\ninterface LSEditorProps {\n  onLSReset(LS: LSystem): void;\n  onLSIterated(LS: LSystem): void;\n  onGFXPropsUpdate(gfxProps: GFXProps): void;\n  initCode?: string\n  initGFXProps?: GFXProps\n  saveToLocalStorage?: string\n}\n\nconst defaultCode = \"* Simple Spiral \\n\\n* Axiom: Start with A A\\nA\\n\\n* Production: A becomes: F (forward), + (turn), A (repeat)\\nA:F+A\"\n\nexport const LSEditor: React.FunctionComponent<LSEditorProps> = ({\n  onLSReset,\n  onLSIterated,\n  onGFXPropsUpdate,\n  initCode,\n  initGFXProps,\n  saveToLocalStorage\n}) => {\n  const [lSystem, setLSystem] = useState<LSystem>();\n  const [status, setStatus] = useState<LSStatus>();\n  const [gfxProps, setGFXProps] = useState<GFXPropsComplete>(completeGfxProps(initGFXProps));\n  const firstRun = useRef<boolean>(true);\n  const initializeCode = (): string => {\n    if (initCode !== undefined) return initCode;\n    if (saveToLocalStorage !== undefined) {\n      let storedVal = localStorage.getItem(saveToLocalStorage);\n      if (storedVal !== undefined && storedVal !== \"\") {\n        return storedVal as string;\n      }\n    }\n    return defaultCode\n  };\n  const [currentCode, setCurrentCode] = useState<string>(initializeCode);\n\n\n\n  const lSystemNeedsReset = useRef<boolean>(true);\n  const gfxPropsNeedsReset = useRef<boolean>(true);\n\n\n  useEffect(() => {\n    if (lSystem)\n      onLSReset(lSystem);\n  }, [lSystem, onLSReset])\n\n\n\n  //TODO: Move line login into refresh function to optimize\n\n\n  useEffect(() => {\n    if (saveToLocalStorage && currentCode !== undefined) {\n      //console.log(\"Local storage key exists setting\", currentCode);\n      localStorage.setItem(saveToLocalStorage, currentCode);\n    }\n  }, [currentCode, saveToLocalStorage])\n  \n\n  const createLSystem = useCallback((lsProps) => {\n    // console.log(\"Gonna run current LS\");\n    try {\n      setStatus({ state: \"compiling\" });\n      createLSInWorker(lsProps).then((updatedLS) => {\n        setLSystem(updatedLS);\n        setStatus({ state: \"compiled\" });\n      });\n    } catch (e) {\n      setStatus({ state: \"error\", errors: [e as Error] });\n    }\n  }, [setStatus]);\n\n\n\n  const updateCurrentGFXProps = useCallback((gfxPropUpdate: GFXProps) => {\n    // console.log(\"Gfx props updated\"); \n    setGFXProps((prevProps) => {\n      if (gfxPropUpdate.iterations !== undefined && gfxPropUpdate.iterations !== prevProps.iterations) {\n        lSystemNeedsReset.current = true;\n      } else {\n        gfxPropsNeedsReset.current = true;\n      }\n      return {...prevProps, ...gfxPropUpdate}\n    })\n  }, [setGFXProps])\n\n  const parseLinesAndCreateLSystem = useCallback(() => {\n      \n    let lines = splitLines(currentCode);\n    const relevantLines = lines.filter((line) => !lineIsComment(line) && line !== \"\\n\");\n    const linesNoWhitespace = relevantLines.map((line) => line.replace(/\\s/g, \"\"))\n    const currentLines = linesNoWhitespace;\n\n    if (currentLines.length < 1) { \n      console.log(currentLines);\n      const noAxiomError = new Error(\"An LSystem needs at least one axiom\"); \n      setStatus({ state: \"error\", errors: [ noAxiomError] })\n    } else {\n      \n      let errors: Error[] = []; \n      let status = \"ready\";\n\n      let axiomLine = currentLines[0];\n      try {\n        parseAxiom(axiomLine);\n      } catch (e) {\n        status = \"error\"\n        errors.push(e as Error);\n      }\n      let productionLines = currentLines.slice(1);\n      productionLines.forEach((productionLine) => {\n        try {\n          parseProduction(productionLine);\n        } catch (e) {\n          status = \"error\"\n          errors.push(e as Error);\n        }\n      })\n      if (status === \"error\") {\n        setStatus({state: status, errors: errors })\n      } else {\n        // @ts-ignore: Ignoring let error.\n        setStatus({state: \"ready\"});\n        createLSystem({axiom: axiomLine, productions: productionLines, iterations: gfxProps.iterations}); \n      }\n    }\n  }, [createLSystem, currentCode, gfxProps.iterations])\n  \n  const runLS = useCallback(() => {\n    // console.log(\"Time to run L-System\");\n    if (lSystemNeedsReset.current) {\n      // console.log(\"recreating LS\");\n      parseLinesAndCreateLSystem();\n      lSystemNeedsReset.current = false;\n    }\n    if (gfxPropsNeedsReset.current) {\n      // console.log(\"recreating GFX\");\n      onGFXPropsUpdate(gfxProps);\n      gfxPropsNeedsReset.current = false;\n    }\n  }, [gfxProps, onGFXPropsUpdate, parseLinesAndCreateLSystem])\n\n  const updateCurrentCode = useCallback((newCode: string) => {\n    setCurrentCode(newCode);\n    lSystemNeedsReset.current = true; \n    if (firstRun.current) {\n      firstRun.current = false;\n      runLS();\n    }\n  }, [setCurrentCode, runLS])\n\n\n\n  const copyCurrentCode = useCallback( () => {\n    let copyString = window.location.origin + \"/edit\" + encodeParams(currentCode, gfxProps);\n    //console.log(\"COPYING CURRENT CODE AND GFXPROPS to \" + copyString, currentCode, gfxProps);\n    copy(copyString); \n    alert(\"Copied\");\n  }, [currentCode, gfxProps])\n\n  const saveCurrentCodeLocally = useCallback(() => {\n    const currentFavoriteString = localStorage.getItem(\"favorites\");\n    const currentFavorites = currentFavoriteString ? JSON.parse(currentFavoriteString) : {};\n    const favoriteObject = {code: currentCode as string, time: (new Date()).toTimeString()}\n    const newFavorites = {...currentFavorites, favoriteObject};\n    localStorage.setItem(\"favorites\", JSON.stringify(newFavorites));\n  }, [currentCode]); \n\n  return (\n    <div style={{display: \"flex\", flexDirection: \"column\"}}>\n      <div className=\"stack\" style={{flex: 2}}>\n        <div>\n          <span className=\"clickable\" onClick={() => runLS()}>\n            Run LS\n          </span>\n          <span className=\"clickable\" onClick={() => copyCurrentCode()}>\n            Share\n          </span>\n          <span className=\"clickable\" onClick={() => saveCurrentCodeLocally()}>\n            Save to favorites\n          </span>\n        </div>\n        <LSCodeEditor initialCode={currentCode} onCodeWasEdited={updateCurrentCode} className=\"black-border\" />\n        <GFXPropsCustomizer gfxProps={completeGfxProps(initGFXProps)} GFXPropsUpdated={updateCurrentGFXProps} />\n      </div>\n      <div style={{flex: 2, backgroundColor: \"#eee\"}} className=\"padded\">\n        <LSConsole status={status} />\n      </div>\n    </div>\n  );\n};\n","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditor/LSStatusConsole.tsx",["148","149","150"],"import { LSStatus } from \"../utils\";\nimport React, {useState, useEffect} from \"react\"\n\ninterface LSConsoleProps {\n  status?: LSStatus\n}\n\ninterface StatusLog {\n  timecode: string,\n  status: LSStatus\n}\n\nconst LSConsole : React.FunctionComponent<LSConsoleProps> = ( {status}) => {\n  \n  const [ statusLog, setStatusLog] = useState<StatusLog[]>([]);\n  const [ currentStatus, setCurrentStatus] = useState<JSX.Element>( statusToEl(status));\n\n  useEffect(() => {\n    if (status) {\n      const statusEl = statusToEl(status);\n      setCurrentStatus(statusEl);\n      setStatusLog((prev) => [...prev, { timecode: new Date().toTimeString(), status }]);\n    }\n  }, [status])\n\n  return statusLog.map((logStatus) => statusToEl(logStatus.status, logStatus.timecode) );\n}\n\nconst statusToEl = (status: LSStatus | undefined, timecode?: string) : JSX.Element => {\n\n  let stringEl;\n  if (!status) {\n    stringEl = <div> No status available </div>\n  } else {\n  switch (status.state) {\n    case \"error\":\n      stringEl = <div> <span> Status has error</span> <ul> { status.errors && status.errors.map((err, i) => <li key={`error-${i}`}> {err.message} </li>)} </ul></div> \n      break;\n    case \"compiling\":\n      stringEl = <div> Compiling </div>\n      break;\n    case \"compiled\":\n      stringEl = <div> Compiled </div>\n      break;\n    case \"ready\":\n      stringEl = <div> About to compile... </div>\n      break;\n    default:\n      stringEl = <div> idk lol </div>\n  }\n}\n\n}\n\nexport default LSConsole;","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditor/LSCodeEditor.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditor/LSGFXEditor.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/FavoritePage.tsx",["151","152"],"import { Link } from \"react-router-dom\";\nimport { encodeParams } from \"../components/utils\";\n\nconst FavoritePage = () => {\n\n  const favorites = localStorage.getItem(\"favorites\");\n  if (! favorites || favorites == \"\") {\n    return \"No favorites yet;\"\n  }\n\n  const faveList = JSON.parse(favorites);\n  let links = [];\n  return Object.keys(faveList).map( (key) => {\n    const fave = faveList[key];\n    if (fave && fave.code) {\n      return (<Link to={`/edit${encodeParams(fave.code, fave.gfx)}`}></Link>)\n    }\n  })\n  \n}\n\nexport default FavoritePage;","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditor/codeSyntax.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/PageLayout.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/data/examples.ts",[],{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","severity":1,"message":"158","line":1,"column":8,"nodeType":"159","messageId":"160","endLine":1,"endColumn":10},{"ruleId":"157","severity":1,"message":"161","line":3,"column":10,"nodeType":"159","messageId":"160","endLine":3,"endColumn":26},{"ruleId":"157","severity":1,"message":"162","line":4,"column":8,"nodeType":"159","messageId":"160","endLine":4,"endColumn":21},{"ruleId":"157","severity":1,"message":"163","line":4,"column":29,"nodeType":"159","messageId":"160","endLine":4,"endColumn":37},{"ruleId":"164","severity":1,"message":"165","line":43,"column":40,"nodeType":"166","messageId":"167","endLine":43,"endColumn":42},{"ruleId":"157","severity":1,"message":"168","line":69,"column":9,"nodeType":"159","messageId":"160","endLine":69,"endColumn":15},{"ruleId":"164","severity":1,"message":"165","line":70,"column":40,"nodeType":"166","messageId":"167","endLine":70,"endColumn":42},{"ruleId":"164","severity":1,"message":"165","line":105,"column":40,"nodeType":"166","messageId":"167","endLine":105,"endColumn":42},{"ruleId":"157","severity":1,"message":"169","line":7,"column":10,"nodeType":"159","messageId":"160","endLine":7,"endColumn":20},{"ruleId":"164","severity":1,"message":"165","line":21,"column":16,"nodeType":"166","messageId":"167","endLine":21,"endColumn":18},{"ruleId":"164","severity":1,"message":"165","line":21,"column":28,"nodeType":"166","messageId":"167","endLine":21,"endColumn":30},{"ruleId":"164","severity":1,"message":"165","line":21,"column":40,"nodeType":"166","messageId":"167","endLine":21,"endColumn":42},{"ruleId":"164","severity":1,"message":"165","line":21,"column":52,"nodeType":"166","messageId":"167","endLine":21,"endColumn":54},{"ruleId":"164","severity":1,"message":"165","line":36,"column":19,"nodeType":"166","messageId":"167","endLine":36,"endColumn":21},{"ruleId":"157","severity":1,"message":"170","line":5,"column":8,"nodeType":"159","messageId":"160","endLine":5,"endColumn":31},{"ruleId":"157","severity":1,"message":"171","line":3,"column":8,"nodeType":"159","messageId":"160","endLine":3,"endColumn":20},{"ruleId":"157","severity":1,"message":"172","line":6,"column":27,"nodeType":"159","messageId":"160","endLine":6,"endColumn":39},{"ruleId":"157","severity":1,"message":"173","line":6,"column":83,"nodeType":"159","messageId":"160","endLine":6,"endColumn":90},{"ruleId":"157","severity":1,"message":"174","line":14,"column":8,"nodeType":"159","messageId":"160","endLine":14,"endColumn":14},{"ruleId":"157","severity":1,"message":"175","line":16,"column":11,"nodeType":"159","messageId":"160","endLine":16,"endColumn":24},{"ruleId":"176","severity":1,"message":"177","line":47,"column":5,"nodeType":"178","messageId":"179","endLine":48,"endColumn":38},{"ruleId":"157","severity":1,"message":"180","line":48,"column":7,"nodeType":"159","messageId":"160","endLine":48,"endColumn":15},{"ruleId":"164","severity":1,"message":"165","line":4,"column":32,"nodeType":"166","messageId":"167","endLine":4,"endColumn":34},{"ruleId":"157","severity":1,"message":"181","line":9,"column":7,"nodeType":"159","messageId":"160","endLine":9,"endColumn":12},"no-native-reassign",["182"],"no-negated-in-lhs",["183"],"@typescript-eslint/no-unused-vars","'p5' is defined but never used.","Identifier","unusedVar","'completeGfxProps' is defined but never used.","'LSImageViewer' is defined but never used.","'GFXProps' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'mouseX' is assigned a value but never used.","'axiomToStr' is defined but never used.","'ReactScrollWheelHandler' is defined but never used.","'LSCustomizer' is defined but never used.","'decodeParams' is defined but never used.","'LSProps' is defined but never used.","'base64' is defined but never used.","'currentStatus' is assigned a value but never used.","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","'stringEl' is assigned a value but never used.","'links' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]