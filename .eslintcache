[{"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/index.tsx":"1","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSPreview.tsx":"2","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/EditorPage.tsx":"3","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/ExamplesPage.tsx":"4","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSTextViewer.tsx":"5","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/index.ts":"6","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/Examples/Lilac.tsx":"7","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/Examples/TextGarden.tsx":"8","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/Examples/Webpage.tsx":"9","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/index.tsx":"10","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/LSImageViewer3D.tsx":"11","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/LSImageViewer2D.tsx":"12","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/drawChar.ts":"13","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/LSImageViewerBasic.tsx":"14","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditAndView.tsx":"15","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditor/LSEditor.tsx":"16","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditor/LSStatusConsole.tsx":"17","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditor/LSCodeEditor.tsx":"18","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditor/LSGFXEditor.tsx":"19","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/FavoritePage.tsx":"20","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditor/codeSyntax.tsx":"21","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/data/examples.ts":"22","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSViewerController.tsx":"23","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/ui/RangeSlider.tsx":"24","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/HomePage.tsx":"25","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/ui/PageLayout.tsx":"26","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/lib/utils.ts":"27","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/lib/worker/index.ts":"28","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/lib/worker/worker.ts":"29"},{"size":1259,"mtime":1634669172206,"results":"30","hashOfConfig":"31"},{"size":4469,"mtime":1634669299865,"results":"32","hashOfConfig":"31"},{"size":1236,"mtime":1634669308383,"results":"33","hashOfConfig":"31"},{"size":1309,"mtime":1634669290190,"results":"34","hashOfConfig":"31"},{"size":325,"mtime":1633391792858,"results":"35","hashOfConfig":"31"},{"size":265,"mtime":1633390898779,"results":"36","hashOfConfig":"31"},{"size":3139,"mtime":1634669288267,"results":"37","hashOfConfig":"31"},{"size":2251,"mtime":1634669294080,"results":"38","hashOfConfig":"31"},{"size":2956,"mtime":1634669294538,"results":"39","hashOfConfig":"31"},{"size":141,"mtime":1633390837983,"results":"40","hashOfConfig":"31"},{"size":2522,"mtime":1634618902280,"results":"41","hashOfConfig":"31"},{"size":1018,"mtime":1632800684164,"results":"42","hashOfConfig":"31"},{"size":2973,"mtime":1631045417779,"results":"43","hashOfConfig":"31"},{"size":5231,"mtime":1634669302923,"results":"44","hashOfConfig":"31"},{"size":2020,"mtime":1634669307763,"results":"45","hashOfConfig":"31"},{"size":8772,"mtime":1634669317163,"results":"46","hashOfConfig":"31"},{"size":3148,"mtime":1634669292724,"results":"47","hashOfConfig":"31"},{"size":1404,"mtime":1634669315525,"results":"48","hashOfConfig":"31"},{"size":2302,"mtime":1634669316378,"results":"49","hashOfConfig":"31"},{"size":807,"mtime":1634669298780,"results":"50","hashOfConfig":"31"},{"size":3066,"mtime":1634164757317,"results":"51","hashOfConfig":"31"},{"size":2598,"mtime":1634669292025,"results":"52","hashOfConfig":"31"},{"size":8177,"mtime":1634669314620,"results":"53","hashOfConfig":"31"},{"size":664,"mtime":1634162436783,"results":"54","hashOfConfig":"31"},{"size":204,"mtime":1634669164718,"results":"55","hashOfConfig":"31"},{"size":783,"mtime":1634669056119,"results":"56","hashOfConfig":"31"},{"size":3426,"mtime":1634669291438,"results":"57","hashOfConfig":"31"},{"size":728,"mtime":1634669293399,"results":"58","hashOfConfig":"31"},{"size":654,"mtime":1634669298102,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"3po7ti",{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"62"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"62"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"62"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"62"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"62"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/index.tsx",[],["124","125"],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSPreview.tsx",["126","127"],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/EditorPage.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/ExamplesPage.tsx",["128","129"],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSTextViewer.tsx",["130"],"import { Axiom } from '@bvk/lsystem'\n\nexport default function LSTextViewer(axioms: string[] | undefined) {\n  if (!axioms)  return <div>No axioms exist</div>\n  let textDivs = axioms.map((val, index) => (\n    <li>  { val}  </li>\n  ));\n  return <ol style={{width: \"100%\", height: \"100%\", overflow: \"scroll\"}}> {textDivs} </ol>\n}","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/index.ts",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/Examples/Lilac.tsx",["131"],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/Examples/TextGarden.tsx",["132","133"],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/Examples/Webpage.tsx",["134","135"],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/index.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/LSImageViewer3D.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/LSImageViewer2D.tsx",["136"],"import p5, { PrintWriter } from \"p5\"\nimport LSImageViewerBasic from \"./LSImageViewerBasic\";\nimport { draw2DChar } from \"./drawChar\";\n\nexport default class LSImageViewer2D extends LSImageViewerBasic {\n  drawCharFunct = draw2DChar;\n \n  drawCurrentAxiom = (p : p5) => {\n    if (this.props.axiom !== undefined) {\n      let cS = this.props.axiom\n      \n      p.background(100,0,100);\n      p.noFill();\n      p.stroke(0, 0, 0);\n      p.strokeWeight(this.props.gfxProps.strokeWeight);\n      let steps = cS.length;\n      p.push();\n      for (let i = 0; i < steps; i++) {\n        let letter = cS[i];\n        let char = letter.symbol;\n        let params = letter.params;\n        let param = letter.params && letter.params.length === 1 ? letter.params[0] + \"\" : undefined;\n        let val = param && !isNaN(parseFloat(param)) ? parseFloat(param) : undefined\n        this.drawCharFunct(p, char, val || this.props.gfxProps.length, val || this.props.gfxProps.angle, params);\n      }\n      p.pop();\n      p.noLoop();\n    }\n  }\n\n\n}\n\n\n","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/drawChar.ts",["137"],"import p5 from \"p5\";\nimport { ParamsValue } from \"@bvk/lsystem\";\n\nexport const draw2DChar = (p : p5, char: string, l: number, a: number, params: ParamsValue | undefined) => {\n  if (!p) return;\n  switch (char) {\n    case \"F\":\n      p.line(0, 0, l, 0);\n      p.translate(l, 0);\n      break;\n    case \"f\":\n      p.translate(l, 0);\n      break;\n    case \"+\":\n      p.rotate(a);\n      break;\n    case \"-\":\n      p.rotate(-a);\n      break;\n    case \"[\":\n      p.push()\n      break;\n    case \"]\":\n      p.pop();\n      break;\n    case \"E\":\n      p.ellipse(0, 0, l, l);\n      break;\n    case \"!\":\n      p.strokeWeight(l)\n      break;\n    case \"~\":\n      p.rotate(Math.random() * a);\n      break;\n    case \"#\":\n      if (!l || l == 0) p.stroke(0, 0, 0);\n      else {\n        let h = params && params[0] ? parseFloat(params[0] as string) : 0;\n        let s = params && params[1] ? parseFloat(params[1] as string) : 100;\n        let b = params && params[2] ? parseFloat(params[2] as string) : 100;\n        p.stroke(h, s, b);\n      }\n      break;\n    default:\n      //console.log(char + \" isn't turtle command\");\n      break;\n  }\n}\n\nexport const draw3DChar = (p: p5, char: string, l: number, a: number, params: ParamsValue | undefined) => {\n  if (!p) return\n  switch (char) {\n    case \"F\":\n      p.line(0, 0, 0, l);\n      p.translate(0, l);\n      break;\n    case \"f\":\n      p.translate(0, l);\n      break;\n    case \"[\":\n      p.push();\n      break;\n    case \"]\":\n      p.pop();\n      break;\n    //Here: Yaw is around Z axis, giving you +/- on the YX plane \n    //What that means, is a 2d curve will be drawn on the YX plane  \n    case \"+\":\n      p.rotateZ(a);\n      break;\n    case \"-\":\n      p.rotateZ(-a);\n      break;\n    //PITCH is around X axis, giving you &/^ (pitch down/up) \n    //So pitching up down gives you rotation \"up/down\" w.r.t to up axis \n    case \"&\":\n      p.rotateX(a);\n      break;\n    case \"^\":\n      p.rotateX(-a)\n      break;\n    //ROLL is around Y axis, gives you a roll around itself\n    //Without any PITCH, Roll is meaningless for a line (just rolls around itself)\n    case '\\'':\n      p.rotateY(a);\n      break;\n    case '/':\n      p.rotateY(-a);\n      break;\n    case \"E\":\n      if (params && params[1]) {\n        p.fill(parseFloat(params[1] as string), 100,100 );\n      }\n      p.ellipse(0, 0, l, l);\n      p.noFill();\n      break;\n    case \"!\":\n      p.strokeWeight(l)\n      break;\n    case \"~\":\n      p.rotateX(Math.random() * a);\n      p.rotateY(Math.random() * a);\n      p.rotateZ(Math.random() * a);\n      break;\n    case \"#\":\n      p.stroke(l, 100, 100);\n      break;\n    case \"M\":\n      draw3DModel(p, params)\n      break;\n    default:\n      //console.log(char + \" isn't turtle command\");\n      break;\n    }\n  }\n\nconst draw3DModel = (p:p5, params: ParamsValue | undefined) => {\n  let scaleValue = params && params[0] ? parseFloat(params[0] as string) : 0.1;\n  p.push();\n  //p.specularMaterial(255);\n  p.scale(scaleValue);\n  p.box(100);\n  p.pop();\n}","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer/LSImageViewerBasic.tsx",["138"],"import React from \"react\"\nimport {  GFXPropsComplete, P5CanvasType } from \"../../utils\";\nimport {Axiom} from \"@bvk/lsystem\"\nimport p5 from \"p5\";\nimport ReactScrollWheelHandler from \"react-scroll-wheel-handler\";\n\n//Props should control all the things coming into the viewer\nexport interface LSImageViewerBasicProps {\n  axiom: Axiom | undefined,\n  gfxProps: GFXPropsComplete\n}\n\n//State should control anything needed for the panning + zooming \nexport interface LSImageViewerBasicState {\n  localScale: number,\n  localCenter: number[] \n}\n\n\nexport default class LSImageViewerBasic< S extends LSImageViewerBasicState = LSImageViewerBasicState> extends React.Component<LSImageViewerBasicProps,S> {\n\n  p5Context: p5 | undefined\n  containerRef = React.createRef<HTMLDivElement>();\n  canvasType : P5CanvasType = \"p2d\"\n  canvasID : string = \"P5-BASIC-CANVAS\" \n\n  constructor(props: LSImageViewerBasicProps) {\n    super(props);\n    //TODO: When to bind\n    this.state = {\n      localScale: props.gfxProps.width / 600,\n      localCenter: props.gfxProps.center\n    } as S\n  }\n  componentDidMount() {\n    if (this.containerRef.current) \n      new p5(this.sketch, this.containerRef.current);\n  }\n  componentDidUpdate(prevProps: LSImageViewerBasicProps) {\n    if (this.props.gfxProps.center !== prevProps.gfxProps.center) {\n      this.setState({localCenter: this.props.gfxProps.center})\n    }\n    if (this.props.gfxProps.width !== prevProps.gfxProps.width || this.props.gfxProps.height !== prevProps.gfxProps.height ) {\n      if (this.p5Context) {\n        console.log(\"🦋🦋🦋🦋🦋🦋🦋🦋 RESIZING CANVAS\", this.props.gfxProps)\n        this.p5Context.resizeCanvas(this.props.gfxProps.width, this.props.gfxProps.height);\n        this.setState({ localScale: this.props.gfxProps.width / 600})\n      }\n    }\n    this.redraw();\n  }\n\n  defaultSetup = (p: p5) => {\n    console.log(\"🦋🦋🦋🦋🦋🦋🦋🦋 creating canvas\", this.props.gfxProps);\n    let cnv = p.createCanvas(this.props.gfxProps.width, this.props.gfxProps.height, this.canvasType);\n    cnv.id(this.canvasID);\n    p.angleMode(p.DEGREES);\n    p.colorMode(p.HSB);\n    p.noLoop();\n    p.textFont(\"monospace \", 12);\n    p.strokeCap(\"butt\")\n  \n  }\n  preload = (p: p5) => {\n    //Do nothing in the base case\n  }\n  redraw = () => {\n    console.log(\"Redrawing graphic\");\n    if (this.p5Context !== undefined) {\n      this.p5Context.clear();\n      this.p5Context.background(this.props.gfxProps.backgroundColor);\n      this.drawCurrentGraphic(this.p5Context);\n      this.p5Context?.noLoop();\n    } else {\n      console.log(\"Couldnt redraw\");\n      console.log(this.p5Context);\n    }\n  }\n  moveToCanvasCenter = (p: p5) => {\n    if (!p) return\n    p.translate(p.width / 2, p.height / 2);\n  }\n  scaleToZoomLevel = (p: p5) => {\n    if (!p) return;\n    p.scale(this.state.localScale);\n  }\n  rotateToUp = (p : p5) => {\n    if (p) p.rotate(-90);\n  }\n  drawCurrentGraphic = (p:p5) => {\n    p.push();\n    this.moveToCanvasCenter(p);\n    this.scaleToZoomLevel(p);\n    p.translate(this.state.localCenter[0] * p.width, this.state.localCenter[1] * p.height);\n    this.rotateToUp(p);\n    this.drawCurrentAxiom(p);\n    p.pop();\n  }\n  drawCurrentAxiom = (p: p5) => {\n    p.fill(Math.random() * 100 , 100 , 100);\n    p.ellipse(0,0,100,100);\n  }\n  startIterationAnimation = () => {\n    //TODO\n  }\n  sketch = (p: p5) => {\n \n    p.setup = () => {\n      console.log(\"💖💖💖💖 RUNNING SETUP NOW FOR P5\")\n      this.defaultSetup(p);\n      this.preload(p);\n      this.p5Context = p;\n      this.redraw();\n    };\n    p.draw = () => {\n\n    }\n  };\n  handleZoom = (zoomAmount: number) => {\n    if (zoomAmount && zoomAmount !== 0) {\n      let scale = this.state.localScale;\n      scale = scale + zoomAmount * scale;\n      console.log(\"Setting new scale\" + scale);\n      this.setState({localScale: scale})\n    }\n  }\n  handlePan = (panX: number, panY: number) => {\n    let center = this.state.localCenter;\n    center = [center[0] + panX, center[1] + panY];\n    this.setState({localCenter: center})\n  }\n  getZoomControls = () => {\n    return (\n      <div key=\"zoom-controls\">\n        <div className=\"clickable\" onClick={(e) => this.handleZoom(+0.1)}>\n          +\n        </div>\n        <div className=\"clickable\" onClick={(e) => this.handleZoom(-0.1)}>\n          -\n        </div>\n      </div>);\n  }\n  getPanControls = () => {\n    return ( <div key=\"pan-controls\">\n      <div className=\"clickable\" onClick={(e) => this.handlePan(0, -0.01)}>\n        up\n      </div>\n      <div className=\"clickable\" onClick={(e) => this.handlePan(0, 0.01)}>\n        dw\n      </div>\n      <div className=\"clickable\" onClick={(e) => this.handlePan(0.01, 0)}>\n        lf\n      </div>\n      <div className=\"clickable\" onClick={(e) => this.handlePan(-0.01, 0)}>\n        rt\n      </div>\n    </div>)\n  }\n  getCanvasControls = (): JSX.Element[] => {\n    return [ this.getZoomControls(), this.getPanControls()];\n  }\n  render() {\n    return (\n      <div style={{ position: \"relative\" }}>\n        <div style={{ position: \"absolute\", right: 0, top: 0, zIndex: 2 }} className=\"padded\" >\n          {this.getCanvasControls()}\n        </div>\n        <div ref={this.containerRef} />\n      </div>\n    );\n  }\n}","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditAndView.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditor/LSEditor.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditor/LSStatusConsole.tsx",["139","140"],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditor/LSCodeEditor.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditor/LSGFXEditor.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/FavoritePage.tsx",["141","142"],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditor/codeSyntax.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/data/examples.ts",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSViewerController.tsx",["143","144","145","146","147","148"],"import React, { useCallback, useRef, useState } from \"react\";\nimport LSystem, { Axiom } from \"@bvk/lsystem\";\nimport { completeGfxProps, GFXProps, renderTypes } from \"../utils\";\nimport LSImageViewer2D from \"./LSImageViewer/LSImageViewer2D\";\nimport LSImageViewer3D from \"./LSImageViewer/LSImageViewer3D\";\nimport { useEffect } from \"react\";\nimport { LSTextViewer } from \".\";\nimport ReactDropdown from \"react-dropdown\";\nimport RangeSlider from \"../ui/RangeSlider\";\nimport { useHotkeys } from \"react-hotkeys-hook\";\nimport useMeasure from \"react-use-measure\";\n\ninterface LSViewerControllerProps {\n  lSystem: LSystem;\n  gfxProps?: GFXProps;\n  autoResize?: boolean;\n  changeViewerControls?: boolean;\n  changeIterationsControls?: boolean;\n}\n\nconst viewerTypeDropdownOptions: { value: renderTypes; label: string }[] = [\n  { value: \"auto\", label: \"Image: Auto\" },\n  { value: \"2d\", label: \"Image: 2D\" },\n  { value: \"3d\", label: \"Image: 3D\" },\n  { value: \"text\", label: \"Text\" },\n];\n\n/**\n * Component to manage viewing an LSystem as an image.\n * NOTE: IF the Lsystem has not been \"iterated\", this component will iterate it on the main thread. It is recommended to iterate before initializing component\n * @param props\n * @returns\n */\nconst LSViewerController: React.FunctionComponent<LSViewerControllerProps> = (props) => {\n  //State to  update renderers\n  const [viewerType, setViewerType] = useState<renderTypes>(extractViewerTypeFromProps(props.gfxProps));\n  const [currentAxiom, setCurrentAxiom] = useState<Axiom>();\n  const [allCurrentAxioms, setAllCurrentAxioms] = useState<Axiom[]>();\n  const [currentIteration, setCurrentIteration] = useState<number>(props.lSystem.iterations);\n  const [currentGFXProps, setCurrentGFXProps] = useState<GFXProps>(props.gfxProps || {});\n  useHotkeys(\"ctrl+/, command+/\", () => { currentlyAnimating.current ? stopIterationAnimation() : startIterationAnimation(); return false});\n\n  //State to update animations\n  const currentlyAnimating = useRef<boolean>(false);\n  const activeInterval = useRef<NodeJS.Timeout>();\n  const [measureRef, bounds] = useMeasure()\n\n  //Trigger re-render if the gxfProps, current axiom, or viewer type change\n  const getCurrentContainerSize = useCallback(() => {\n    if (viewerContainerEl.current && props.autoResize) {\n      \n      return {bounds, height}\n    } else {\n      return {}\n    }\n  }, [props.autoResize])\n  const getViewer = useCallback(() => {\n    if (currentAxiom) {\n      console.log(\"↗️↗️↗️↗️ RETURNING A NEW VIEWER!\", currentGFXProps)\n      const viewerProps = { gfxProps: completeGfxProps({...currentGFXProps, ...getCurrentContainerSize()}), axiom: currentAxiom };\n      switch (viewerType) {\n        case \"2d\":\n          return <LSImageViewer2D {...viewerProps} key=\"controller-viewer-2d\" />;\n        case \"3d\":\n          return <LSImageViewer3D {...viewerProps} key=\"controller-viewer-3d\" />;\n        case \"text\":\n          const axiomsAsText = props.lSystem.getAllIterationsAsString();\n          return LSTextViewer(axiomsAsText);\n        case \"auto\":\n          const autoViewerType = getAutoViewerType(props.lSystem);\n          if (autoViewerType === \"3d\") {\n            return <LSImageViewer3D {...viewerProps} key=\"controller-viewer-3d\" />;\n          } else {\n            return <LSImageViewer2D {...viewerProps} key=\"controller-viewer-2d\" />;\n          }\n      }\n    }\n  }, [currentAxiom, currentGFXProps, getCurrentContainerSize, viewerType, props.lSystem]);\n\n  //Keep canvas size in sync with its container\n  useEffect(() => {\n    window.addEventListener(\"resize\", resizeGFXProps);\n    setCurrentGFXProps({...currentGFXProps, ...getCurrentContainerSize()})\n    return () => {\n      window.removeEventListener(\"resize\", resizeGFXProps);\n    };\n  }, [props.autoResize]);\n  const resizeGFXProps = () => { \n      const newGfxProps: GFXProps = { ...currentGFXProps,  ...getCurrentContainerSize() };\n      console.log(\"GFX Props updated\", newGfxProps);\n      setCurrentGFXProps(newGfxProps);\n  };\n\n\n  //When the lsystem changes, cancel any anim timers and set current iterations + all current axioms\n  useEffect(() => {\n    if (activeInterval.current) clearTimeout(activeInterval.current);\n    setCurrentIteration(props.lSystem.iterations);\n    setAllCurrentAxioms(props.lSystem.getAllIterationsAsObject());\n  }, [props.lSystem, props.lSystem.iterations]);\n\n  //When the currentIteration or all current Axioms change, change current axiom (trigger-re-render)\n  useEffect(() => {\n    if (allCurrentAxioms) setCurrentAxiom(allCurrentAxioms[currentIteration]);\n  }, [currentIteration, allCurrentAxioms]);\n\n  //If ls or gfx props change, viewer type may change\n  useEffect(() => {\n    if (props.gfxProps) {\n      const newViewerType = extractViewerTypeFromProps(props.gfxProps);\n      setViewerType(newViewerType);\n      setCurrentGFXProps(props.gfxProps);\n    }\n  }, [props.gfxProps]);\n\n  //Helper functions for animations\n  const stopIterationAnimation = () => {\n    console.log(\"Anim stop\", currentIteration);\n    currentlyAnimating.current = false;\n  };\n  const startIterationAnimation = () => {\n    console.log(\"Anim start\");\n    currentlyAnimating.current = true;\n    setCurrentIteration(0);\n  };\n  //Animation is just powered by changes to currentIteration.\n  //The currentIteration changes itself every x seconds.\n  //STOP IF:  the LS changes the iters set to the stopping point OR forced stop\n  useEffect(() => {\n    if (currentIteration === props.lSystem.iterations || currentlyAnimating.current === false) {\n      stopIterationAnimation();\n    } else {\n      activeInterval.current = setTimeout(\n        () => setCurrentIteration(currentIteration + 1),\n        props.gfxProps?.animationWaitTime || completeGfxProps(undefined).animationWaitTime\n      );\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentIteration]);\n\n\n\n  return (\n    <div className=\"stack no-gap\" style={{ position: \"relative\", alignItems: \"stretch\" }}>\n      <div className=\"toolbar horizontal-stack small edit-surface border-bottom visible-overflow\">\n        <div>\n          <ReactDropdown\n            options={viewerTypeDropdownOptions}\n            value={viewerType}\n            disabled={!props.changeViewerControls}\n            onChange={(opt) => setViewerType(opt.value as renderTypes)}\n            arrowClosed={props.changeViewerControls && <span>▾</span>}\n            arrowOpen={props.changeViewerControls && <span>▾</span>}\n            controlClassName={\"horizontal-stack smaller clickable\"}\n            menuClassName={\"border floating padded edit-surface-light-tone clickable stack\"}\n          />\n        </div>\n        <div className=\"horizontal-stack padded:right \">\n          Iteration\n          <span style={{ width: \"2.2ch\", textAlign: \"right\", display: \"inline-block\" }}> {currentIteration} </span>\n          <div style={{ width: \"10ch\" }}>\n            <RangeSlider\n              min={0}\n              max={props.lSystem.iterations}\n              onChange={(n: number) => {\n                stopIterationAnimation();\n                setCurrentIteration(n);\n              }}\n              currentValue={currentIteration}\n            />\n          </div>\n        </div>\n        <div\n          onClick={() => (currentlyAnimating.current ? stopIterationAnimation() : startIterationAnimation())}\n          className=\"clickable minwidth\"\n        >\n          {currentlyAnimating.current ? \"stop\" : \"animate\"}{\" \"}\n          <div className=\"gray subtext padded:left:smallest\">(⌘+/)</div>\n        </div>\n      </div>\n      <div ref={measureRef} className={\"hide-overflow full-size\"}>\n        {getViewer()}\n      </div>\n    </div>\n  );\n};\n\nexport default LSViewerController;\n\n// Helper functions to automatically choose character\nfunction charIs3D(l: string) {\n  let is3D = l == \"&\" || l == \"^\" || l == \"/\" || l == \"\\\\\";\n  return is3D;\n}\nfunction extractViewerTypeFromProps(gfxProps?: GFXProps): renderTypes {\n  if (gfxProps && gfxProps.renderType && !gfxProps.renderType.includes(\"auto\")) {\n    if (gfxProps.renderType.includes(\"text\")) return \"text\";\n    if (gfxProps.renderType.includes(\"2d\")) return \"2d\";\n    if (gfxProps.renderType.includes(\"3d\")) return \"3d\";\n  }\n  return \"auto\";\n}\n\nfunction getAutoViewerType(lSystem: LSystem): renderTypes {\n  for (let i = 0; i < lSystem.axiom.length; i++) {\n    if (charIs3D(lSystem.axiom[i].symbol)) {\n      return \"3d\";\n    }\n  }\n  for (let i = 0; i < lSystem.productions.length; i++) {\n    let p = lSystem.productions[i];\n    let successors = Array.isArray(p.successor) ? p.successor : [p.successor];\n    for (let j = 0; j < successors.length; j++) {\n      let s = successors[j];\n      for (let k = 0; k < s.letters.length; k++) {\n        if (charIs3D(s.letters[k].symbol)) {\n          return \"3d\";\n        }\n      }\n    }\n  }\n  return \"2d\";\n}\n","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/ui/RangeSlider.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/HomePage.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/ui/PageLayout.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/lib/utils.ts",["149","150"],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/lib/worker/index.ts",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/lib/worker/worker.ts",[],{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","severity":1,"message":"156","line":4,"column":41,"nodeType":"157","messageId":"158","endLine":4,"endColumn":58},{"ruleId":"155","severity":1,"message":"159","line":4,"column":79,"nodeType":"157","messageId":"158","endLine":4,"endColumn":90},{"ruleId":"160","severity":1,"message":"161","line":6,"column":44,"nodeType":"162","messageId":"163","endLine":6,"endColumn":46},{"ruleId":"160","severity":1,"message":"161","line":17,"column":50,"nodeType":"162","messageId":"163","endLine":17,"endColumn":52},{"ruleId":"155","severity":1,"message":"164","line":1,"column":10,"nodeType":"157","messageId":"158","endLine":1,"endColumn":15},{"ruleId":"155","severity":1,"message":"165","line":4,"column":47,"nodeType":"157","messageId":"158","endLine":4,"endColumn":55},{"ruleId":"166","severity":1,"message":"167","line":43,"column":40,"nodeType":"168","messageId":"163","endLine":43,"endColumn":42},{"ruleId":"155","severity":1,"message":"169","line":62,"column":9,"nodeType":"157","messageId":"158","endLine":62,"endColumn":15},{"ruleId":"166","severity":1,"message":"167","line":70,"column":40,"nodeType":"168","messageId":"163","endLine":70,"endColumn":42},{"ruleId":"166","severity":1,"message":"167","line":105,"column":40,"nodeType":"168","messageId":"163","endLine":105,"endColumn":42},{"ruleId":"155","severity":1,"message":"170","line":1,"column":14,"nodeType":"157","messageId":"158","endLine":1,"endColumn":25},{"ruleId":"166","severity":1,"message":"167","line":36,"column":19,"nodeType":"168","messageId":"163","endLine":36,"endColumn":21},{"ruleId":"155","severity":1,"message":"171","line":5,"column":8,"nodeType":"157","messageId":"158","endLine":5,"endColumn":31},{"ruleId":"155","severity":1,"message":"172","line":2,"column":50,"nodeType":"157","messageId":"158","endLine":2,"endColumn":56},{"ruleId":"160","severity":1,"message":"161","line":89,"column":50,"nodeType":"162","messageId":"163","endLine":89,"endColumn":52},{"ruleId":"155","severity":1,"message":"173","line":3,"column":10,"nodeType":"157","messageId":"158","endLine":3,"endColumn":21},{"ruleId":"160","severity":1,"message":"161","line":5,"column":48,"nodeType":"162","messageId":"163","endLine":5,"endColumn":50},{"ruleId":"174","severity":1,"message":"175","line":56,"column":6,"nodeType":"176","endLine":56,"endColumn":24,"suggestions":"177"},{"ruleId":"174","severity":1,"message":"178","line":87,"column":6,"nodeType":"176","endLine":87,"endColumn":24,"suggestions":"179"},{"ruleId":"166","severity":1,"message":"167","line":192,"column":16,"nodeType":"168","messageId":"163","endLine":192,"endColumn":18},{"ruleId":"166","severity":1,"message":"167","line":192,"column":28,"nodeType":"168","messageId":"163","endLine":192,"endColumn":30},{"ruleId":"166","severity":1,"message":"167","line":192,"column":40,"nodeType":"168","messageId":"163","endLine":192,"endColumn":42},{"ruleId":"166","severity":1,"message":"167","line":192,"column":52,"nodeType":"168","messageId":"163","endLine":192,"endColumn":54},{"ruleId":"155","severity":1,"message":"180","line":3,"column":25,"nodeType":"157","messageId":"158","endLine":3,"endColumn":35},{"ruleId":"155","severity":1,"message":"181","line":76,"column":10,"nodeType":"157","messageId":"158","endLine":76,"endColumn":20},"no-native-reassign",["182"],"no-negated-in-lhs",["183"],"@typescript-eslint/no-unused-vars","'encodePropsParams' is defined but never used.","Identifier","unusedVar","'propsToCode' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'Axiom' is defined but never used.","'GFXProps' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'mouseX' is assigned a value but never used.","'PrintWriter' is defined but never used.","'ReactScrollWheelHandler' is defined but never used.","'useRef' is defined but never used.","'codeToProps' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'bounds'. Either include it or remove the dependency array.","ArrayExpression",["184"],"React Hook useEffect has missing dependencies: 'currentGFXProps', 'getCurrentContainerSize', and 'resizeGFXProps'. Either include them or remove the dependency array. You can also do a functional update 'setCurrentGFXProps(c => ...)' if you only need 'currentGFXProps' in the 'setCurrentGFXProps' call.",["185"],"'splitLines' is defined but never used.","'cleanParam' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},"Update the dependencies array to be: [bounds, props.autoResize]",{"range":"190","text":"191"},"Update the dependencies array to be: [currentGFXProps, getCurrentContainerSize, props.autoResize, resizeGFXProps]",{"range":"192","text":"193"},[2349,2367],"[bounds, props.autoResize]",[3727,3745],"[currentGFXProps, getCurrentContainerSize, props.autoResize, resizeGFXProps]"]