[{"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/index.tsx":"1","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSPreview.tsx":"2","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/EditorPage.tsx":"3","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/utils.ts":"4","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditor.tsx":"5","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSCustomizer.tsx":"6","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/ExamplesPage.tsx":"7","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/worker/index.ts":"8","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/worker/worker.ts":"9","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer3D.tsx":"10","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSTextViewer.tsx":"11","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSAllViewer.tsx":"12","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/index.ts":"13","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/Examples/Lilac.tsx":"14","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/Examples/TextGarden.tsx":"15","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/Examples/Webpage.tsx":"16","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSTextEditor.tsx":"17","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewerParent.tsx":"18","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer2D.tsx":"19"},{"size":1061,"mtime":1627854113920,"results":"20","hashOfConfig":"21"},{"size":4290,"mtime":1627854013781,"results":"22","hashOfConfig":"21"},{"size":1658,"mtime":1628280998240,"results":"23","hashOfConfig":"21"},{"size":3167,"mtime":1629406174410,"results":"24","hashOfConfig":"21"},{"size":1438,"mtime":1627853659055,"results":"25","hashOfConfig":"21"},{"size":13426,"mtime":1622246845772,"results":"26","hashOfConfig":"21"},{"size":3816,"mtime":1620881620411,"results":"27","hashOfConfig":"21"},{"size":612,"mtime":1627852862790,"results":"28","hashOfConfig":"21"},{"size":654,"mtime":1627852181355,"results":"29","hashOfConfig":"21"},{"size":4454,"mtime":1629404387453,"results":"30","hashOfConfig":"21"},{"size":365,"mtime":1627853312579,"results":"31","hashOfConfig":"21"},{"size":1307,"mtime":1629404391872,"results":"32","hashOfConfig":"21"},{"size":299,"mtime":1629404388888,"results":"33","hashOfConfig":"21"},{"size":3103,"mtime":1629404388224,"results":"34","hashOfConfig":"21"},{"size":2660,"mtime":1629404369914,"results":"35","hashOfConfig":"21"},{"size":2890,"mtime":1629404372801,"results":"36","hashOfConfig":"21"},{"size":1940,"mtime":1628280980602,"results":"37","hashOfConfig":"21"},{"size":3505,"mtime":1629407342789,"results":"38","hashOfConfig":"21"},{"size":12929,"mtime":1629404368869,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1r4qygr",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"42"},"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/index.tsx",[],["86","87"],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSPreview.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/EditorPage.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/utils.ts",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditor.tsx",["88"],"import React from \"react\";\nimport LSystem from \"@bvk/lsystem\";\nimport LSCustomizer from \"./LSCustomizer\";\nimport P5Turtle from \"./LSDraw/P5Turtle\";\nimport { GFXProps, LSProps } from \"./utils\";\nimport LSViewer from \"./LSViewer\";\n\n\n/* LSEditor.ts\n* This class is a combination of an LSCustomizer and an LSViewer\n* It manages updates from the customizer, and mantains LS/GFXProps to pass into the viewer.\n* */\ninterface LSEditorState {\n  LSystem: LSystem | undefined,\n  gfxProps?: GFXProps\n}\ninterface LSEditorProps {\n  initLSProps: LSProps\n  initGFXProps?: GFXProps\n}\nexport default class LSEditor extends React.Component<LSEditorProps, LSEditorState> {\n  state: LSEditorState = {\n      LSystem: undefined,\n      gfxProps: this.props.initGFXProps || {}\n  }\n  onLSIterated = (LS: LSystem) => {\n      this.setState({ LSystem: LS })\n  }\n  onLSReset = (LS: LSystem) => {\n      this.setState({ LSystem: LS });\n  }\n  onGFXPropsUpdated = (gfxProps: GFXProps) => {\n      this.setState({gfxProps: gfxProps});\n  }\n  render() {\n      return (\n      <div className=\"side-by-side\">\n          <LSCustomizer\n          onLSIterated={this.onLSIterated}\n          onLSReset={this.onLSReset}\n          onGFXPropsUpdate={this.onGFXPropsUpdated}\n          initLSProps={this.props.initLSProps}\n          initGFXProps={this.props.initGFXProps}\n          key=\"LSCustomizer\"\n          />\n          <LSViewer LSystem={this.state.LSystem} gfxProps={this.state.gfxProps}/>\n      </div >\n      )\n    }\n}\n\n","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSCustomizer.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/ExamplesPage.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/worker/index.ts",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/worker/worker.ts",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer3D.tsx",["89","90","91","92","93"],"import { ParamsValue } from \"@bvk/lsystem\";\nimport p5 from \"p5\";\nimport LSImageViewer2D from \"./LSImageViewer2D\";\nimport '../../styles/resizable.css'\nimport {Resizable} from \"react-resizable\";\n\nexport default class LSImageViewer3D extends LSImageViewer2D {\n  canvasType : \"webgl\" | \"p2d\" = \"webgl\";\n  models : p5.Geometry[] = [];\n  private cameraPos: number[] | undefined;\n  private cameraNum = 0;\n  canvasID = \"CANVAS-P53D\"\n\n\n  rotateToUp = () => {\n    let p = this.p5Context;\n    if (p) p.rotate(-180);\n  }\n  preload = (p: p5) => {\n   \n  }\n  moveToCenter = () => {\n    //Do nothing, were already there\n    let p = this.p5Context;\n    if (!p) return;\n    if (!this.cameraPos)  {this.cameraPos = [0, 0, 0]; this.moveCamera(); }\n    p.camera(this.cameraPos[0], this.cameraPos[1], this.cameraPos[2], 0, 0, 0, 0, 1, 0);\n  }\n  drawChar = (char: string, l: number, a: number, params: ParamsValue | undefined) => {\n    let p = this.p5Context;\n    if (!p) return\n    switch (char) {\n      case \"F\":\n        p.line(0, 0, 0, l);\n        p.translate(0, l);\n        break;\n      case \"f\":\n        p.translate(0, l);\n        break;\n      case \"[\":\n        p.push();\n        break;\n      case \"]\":\n        p.pop();\n        break;\n      //Here: Yaw is around Z axis, giving you +/- on the YX plane \n      //What that means, is a 2d curve will be drawn on the YX plane  \n      case \"+\":\n        p.rotateZ(a);\n        break;\n      case \"-\":\n        p.rotateZ(-a);\n        break;\n      //PITCH is around X axis, giving you &/^ (pitch down/up) \n      //So pitching up down gives you rotation \"up/down\" w.r.t to up axis \n      case \"&\":\n        p.rotateX(a);\n        break;\n      case \"^\":\n        p.rotateX(-a)\n        break;\n      //ROLL is around Y axis, gives you a roll around itself\n      //Without any PITCH, Roll is meaningless for a line (just rolls around itself)\n      case '\\'':\n        p.rotateY(a);\n        break;\n      case '/':\n        p.rotateY(-a);\n        break;\n      case \"E\":\n        if (params && params[1]) {\n          p.fill(parseFloat(params[1] as string), 100,100 );\n        }\n        p.ellipse(0, 0, l, l);\n        p.noFill();\n        break;\n      case \"!\":\n        p.strokeWeight(l)\n        break;\n      case \"~\":\n        p.rotateX(Math.random() * a);\n        p.rotateY(Math.random() * a);\n        p.rotateZ(Math.random() * a);\n        break;\n      case \"#\":\n        p.stroke(l, 100, 100);\n        break;\n      case \"M\":\n        this.drawModel(p, params)\n        break;\n      default:\n        //console.log(char + \" isn't turtle command\");\n        break;\n      }\n    }\n\n  drawModel = (p:p5, params: ParamsValue | undefined) => {\n    let scaleValue = params && params[0] ? parseFloat(params[0] as string) : 0.1;\n    p.push();\n    //p.specularMaterial(255);\n    p.scale(scaleValue);\n    p.box(100);\n    p.pop();\n  }\n  moveCamera = () => {\n    if (!this.p5Context) return;\n    let displacement = this.p5Context.height * 0.9;\n    if (this.cameraNum == 0) {\n      this.cameraPos = [0, 0, displacement];\n    }\n    if (this.cameraNum == 1) {\n      this.cameraPos = [displacement, 30, 0];\n    }\n    if (this.cameraNum == 2) {\n      this.cameraPos = [0, 0, -displacement];\n    }\n    if (this.cameraNum == 3) {\n      this.cameraPos = [-displacement, 0, 0];\n    }\n    this.cameraNum = this.cameraNum + 1;\n    this.cameraNum = this.cameraNum > 3 ? 0 : this.cameraNum;\n    //this.cameraPos[1] += 30;\n  }\n\n  render() {\n    return (\n      <div className=\"stack smaller\">\n        <div>\n          <span className=\"clickable\" onClick={(e) => {this.moveCamera(); this.redraw()}}> rotate me </span> \n          <span className=\"clickable\" onClick={() => this.startIterationAnimation()}> animate growth </span>\n          <span className=\"clickable\" onClick={() => this.toggleRecording()}> {this.state.isRecording ? \"🔴 Stop recording\" : \"Start recording\" } </span>\n          <span  className=\"clickable\" onClick={() => this.moveCenterPoints(-1,0)}> ← </span>\n          <span  className=\"clickable\" onClick={() => this.moveCenterPoints(1,0)}> ➝ </span>\n          <span  className=\"clickable\" onClick={() => this.moveCenterPoints(0,-1)}> ↑ </span>\n          <span  className=\"clickable\" onClick={() => this.moveCenterPoints(0,1)}> ↓ </span>\n        </div>\n        <Resizable width={this.state.canvasSize[0]} height={this.state.canvasSize[1]} onResize={this.onResize} >\n          <div ref={this.containerRef} />\n        </Resizable>\n      </div>\n    )\n  }\n\n}\n","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSTextViewer.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSAllViewer.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/index.ts",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/Examples/Lilac.tsx",["94"],"import LSystem, { ParamsValue } from \"@bvk/lsystem\"\nimport p5 from \"p5\"\nimport LSImageViewer3D from \"../../components/LSViewer/LSImageViewer3D\"\nimport { CompleteLSExample, GFXProps } from \"../../components/utils\"\n\nconst lilacData: CompleteLSExample = {\n  name: \"lilac\",\n  lsProps: {\n    axiom: \"!(0.9) #(120) [ -(44)  ^(20) F(50) AK ] \",\n    productions: [\n      \"A: P I(0) /(90)  A\",\n      \"I(t) {t!=2}:  F I(t+1)\",\n      \"I(t) {t==2}: ^(rnd(5,15)) #(rnd(60,150)) I(t+1)[-(45)FFA][+(45)FFA][FFA]\",\n      \"P: [-(45)/(45)K][+(45)/(45)K]\",\n      \"K: [F #(100) F [~ M(0.05)]]\",\n      \"M(s) {s<0.1}: M(s+0.05)\",\n      \"M(s) {s>=0.1}: M(0.1)\"\n    ],\n    iterations: 16,\n  },\n  gfxProps: {\n    length: 3,\n    renderType: [\"3d\"],\n    width: 1200,\n    height: 850,\n    angle: 8\n  },\n};\nexport default function Lilac() {\n  let ls =  new LSystem(lilacData.lsProps.axiom, lilacData.lsProps.productions, lilacData.lsProps.iterations);\n  let gfxProps = lilacData.gfxProps; \n\n  return (\n    <div > \n      <DrawLilac LSystem={ls} GFXProps={gfxProps} /> \n      \n    </div>)\n}\n\nconst flowerHue = 325;  \nclass DrawLilac extends LSImageViewer3D {\n  windAngle = 0;\n  animationSpeed = 600;\n  preload = (p: p5) => {\n    p.loadModel(\n      process.env.PUBLIC_URL + \"/assets/lily-flat.obj\",\n      true,\n      (m) => {\n        this.models.push(m);\n        this.startIterationAnimation()\n      },\n      (e) => {\n        console.log(\"Fail to load model\");\n      }\n    );\n  }\n  moveToCenter = () => {\n    //Do nothing, were already there\n    let p = this.p5Context;\n    if (!p) return;\n    p.background(200, 100,100,0.0);\n    \n    let pos = [-180,-150,-320];\n    p.ambientLight(flowerHue - 95, 80, 100);\n    p.pointLight(flowerHue, 80, 90, -500, -500, -900);\n    p.pointLight(flowerHue + 200, 80, 65, 200, 200, -300);\n    \n    p.camera(pos[0], pos[1], pos[2], pos[0], pos[1],0, 0,1,0);\n    \n  }\n  simulateWind = () => {\n    let maxBlows = Math.floor(Math.random() * 100 + 20);\n    for (var i = 0; i < maxBlows; i++) {\n      setTimeout(() => {\n        this.redraw();\n      }, i * 100);\n    }\n  }\n  drawModel = (p:p5, params: ParamsValue | undefined) => {\n    let scaleValue = params && params[0] ? parseFloat(params[0] as string) : 0.1;\n    let model = this.models[0];\n    if (!model) return;\n    p.push();\n\n    p.noStroke();\n    p.fill(100,100,100);   \n    p.specularMaterial(flowerHue,0,100)\n    p.scale(scaleValue);\n    p.model(model);\n    p.pop();\n  }\n  moveCamera = () => {\n    //Do nothing\n  }\n  render() {\n    return (\n      <div style={{backgroundImage: \"linear-gradient(white 30%, rgb(255,220,250))\"}}>\n        <div\n          style={{\n            position: \"fixed\",\n            top: \"12px\",\n            right: \"12px\",\n            width: \"24px\",\n            height: \"24px\",\n            borderRadius: \"100%\",\n            cursor: \"ne-resize\",\n            background: \"rgb(250,120,200)\"\n          }}\n          onClick={() => this.startIterationAnimation()}\n        >\n          {\" \"}\n        </div>\n        <div onClick={(e) => this.simulateWind()} ref={this.containerRef} style={{marginLeft: \"10%\"}}/>\n      </div>\n    );\n  }\n}","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/Examples/TextGarden.tsx",["95","96"],"import LSystem, { ParamsValue } from \"@bvk/lsystem\";\nimport p5 from \"p5\";\nimport LSImageViewer2D from \"../../components/LSViewer/LSImageViewer2D\";\nimport { CompleteLSExample } from \"../../components/utils\";\n\n\nconst textFlower: CompleteLSExample = {\n  name: \"textFlower\",\n  lsProps: {\n    axiom: \"[S] \",\n    productions: [\n      \"S: A(rnd(5,10))\",\n      \"A(a) {a>=1}: F B(0) B(1) + A(a-1)\",\n      \"B(b) {b==0}: [+(75) F(20) f(10) T(0)]\",\n      \"B(b) {b==1}: [-(75) F(20) f(50) +(180) T(1)]\",\n      \"A(a) {a<1}: FFFF -(120) P(rnd(8,19))\",\n      \"P(p) {p>0}: [F(40) f(10) T(2)] [+(rnd(40,60)) P(p-1)]\",\n      \"P(p) {p==0}: X\"\n    ],\n    iterations: 30,\n  },\n  gfxProps: {\n    length: 40,\n    renderType: [\"2d\"],\n    width: 600,\n    height: 760,\n    angle: 5,\n    center: [0,0.4],\n  },\n};\n\nconst text = [{t:\"you\", s: 16},{t:\"thank\", s:16}, {t:\"☼\", s: 18}]\nconst defaultText = {t: \"\", s: 12};\n\nexport default function textGarden() {\n  let ls = new LSystem(textFlower.lsProps.axiom, textFlower.lsProps.productions, textFlower.lsProps.iterations);\n  let gfxProps = textFlower.gfxProps\n  console.log(ls.getAllIterationsAsString());\n\n  return (<TextTurtle LSystem={ls} GFXProps={gfxProps}/>)\n}\nfunction drawText(p: p5, params: ParamsValue | undefined) {\n  let index =  params && params.length == 1 ? parseInt(params[0]  as string) : -1;\n  let textObj = index > -1 ? text[index] : defaultText;\n  p.push();\n  p.noStroke();\n  p.fill(0,0,0);\n  p.textSize(textObj.s);\n  p.text(textObj.t, 0,0);\n  p.pop();\n}\n\nclass TextTurtle extends LSImageViewer2D {\n  xPercent = 1;\n  preload = (p:p5) => { \n    p.textFont(\"helvetica\");\n  }\n  setDefaults = (p: p5) => {\n    let center = this.props.GFXProps?.center !== undefined ? [p.width * this.props.GFXProps?.center[0], p.height * this.props.GFXProps?.center[1]] : [0, 0];\n    let sw = this.props.GFXProps?.strokeWeight ? this.props.GFXProps?.strokeWeight : 1;\n    let defaultLength = this.props.GFXProps?.length ? this.props.GFXProps?.length : 0.01 * p.height;\n    let defaultAngle = this.xPercent * 5;\n    return {center, sw, defaultLength, defaultAngle}\n  }\n  customRules = {\n    \"T\": drawText \n  }\n  mouseMove = (e: React.MouseEvent) => {\n    let mouseX = e.pageX;\n    let mousePercentage = e.pageX / window.innerWidth - 0.5;\n    console.log(mousePercentage);\n    this.xPercent = mousePercentage;\n    this.redraw();\n  }\n  render() {\n    return (\n    <div onMouseMove={this.mouseMove} className=\"full-bleed\" style={{backgroundImage: \"linear-gradient(white 80%, rgba(140,255,100,0.6))\"}} >\n      <div ref={this.containerRef} style={{display: \"inline-block\", marginLeft: \"50%\", transform: \"translate(-50%, 0)\"}}/>\n    </div>)\n  }\n}\n\n","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/Examples/Webpage.tsx",["97","98"],"import LSystem, { ParamsValue } from \"@bvk/lsystem\";\nimport p5 from \"p5\";\nimport LSImageViewer2D from \"../../components/LSViewer/LSImageViewer2D\";\nimport { CompleteLSExample } from \"../../components/utils\";\n\nlet webData : CompleteLSExample = {\n  lsProps: {\n    axiom: \"A(15)\", \n    productions: [\"A(a):f(a)+B(a)A(a+1)\", \"B(b):[-(90)ffT(b-15)]  [+(90) fff -(90) P(b-20)]\"],\n    iterations: 48\n  },\n  gfxProps: {\n    angle: 5,\n    length: 5,\n    width: 2000,\n    height: 800,\n    center: [-0.18,0.2]\n  }\n}\n\nexport default function WebPage() {\n  let ls = new LSystem(webData.lsProps.axiom, webData.lsProps.productions, webData.lsProps.iterations);\n  let gfxProps = webData.gfxProps;\n  return <WebTurtle LSystem={ls} GFXProps={gfxProps}/>\n}\n\n\nconst text = [\"Alt social \",\n\"Starry night - rhizome \",\n\"Run your own social \",\n\"Special fish\",\n\"Petals network\",\n\"cyberspace and as space\",\n\"Mastodon\",\n\"Feminist community networks \",\n\"Echo\",\n\"This is Fine: Optimism & Emergency in the P2P Network\",\n\"Distributed Web of Care\",\n\"PeerToPeerWeb / Dat\",\n\"Consentful Tech\",\n\"Rediscovering the small web\",\n\"Zonelets: \",\n\"Cozy web/extended internet universe\",\n\"Small web / site.js\",\n\"NYC mesh \",\n\"History of communication \",\n\"Black gooey universe \",\n\"Hand made web \",\n\"Hundred rabbits\",\n\"Dark Study \",\n\"Tiny tools list (everest pipkin)\",\n\"Wonderful world of weird creative tools \",\n\"Glyph Drawing Club\",\n\"Programs | Emergent Works\",\n\"Casual creation tools - a paper \",\n\"SQLLite story\",\n\"Jeffrey Alan schuder\",\n\"Picrew: Create avatars\",\n\"coming age of calm tech - xerox parc\",\n\"The rise of the ambient video game\",\n\"Using the internet mindfully\",\n\"Soft.works\",\n\"hardlyeverything.co\",\n\"How to grow an idea\",]\n\nconst defaultText = \"\";\n\n\nfunction drawText(p: p5, params: ParamsValue | undefined) {\n  let index =  params && params.length == 1 ? parseInt(params[0]  as string) : -1;\n  let textObj = index > -1 ? text[index] : defaultText;\n  p.push();\n  p.noStroke();\n  p.fill(230,100,100);\n  p.textSize(12);\n  p.textStyle()\n  p.text(textObj, 0,0);\n  p.pop();\n}\n\nconst t2 = [\"m\",\n\"y\",\n\" \",\n\"f\",\n\"a\",\n\"v\",\n\"o\",\n\"r\",\n\"i\",\n\"t\",\n\"e\",\n\" \",\n\"r\",\n\"e\",\n\"f\",\n\"e\",\n\"r\",\n\"e\",\n\"n\",\n\"c\",\n\"e\",\n\"s\", ]\n\nfunction drawText2(p: p5, params: ParamsValue | undefined) {\n  let index =  params && params.length == 1 ? parseInt(params[0]  as string) : -1;\n  let textObj = index > -1 && index < t2.length ? t2[index] : defaultText;\n  p.push();\n  p.noStroke();\n  p.fill(0,0,0);\n  p.textSize(14);\n  p.textStyle()\n  p.text(textObj, 0,0);\n  p.pop();\n}\n\nclass WebTurtle extends LSImageViewer2D {\n\n  animationSpeed = 1000;\n  preload = (p:p5) => { \n    //p.textFont(\"consolas\");\n  }\n  customRules = {\n    \"T\": drawText,\n    \"P\": drawText2\n  }\n\n  render() {\n    return (\n    <div className=\"full-bleed\"  >\n      <div ref={this.containerRef} style={{display: \"inline-block\", marginLeft: \"50%\", transform: \"translate(-50%, 0)\"}}/>\n    </div>)\n  }\n}\n\n","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSTextEditor.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewerParent.tsx",["99","100","101","102","103"],"import React, {createRef, useEffect, useRef} from \"react\";\nimport LSystem, { Axiom } from \"@bvk/lsystem\"\nimport { GFXProps, GFXPropsComplete, P5CanvasType } from \"../utils\";\nimport p5 from \"p5\"\nimport { useState } from \"react\";\nimport { useCallback } from \"react\";\n\ninterface LSImageViewerParentProps {\n  LSystem: LSystem | undefined\n  drawCommand: Axiom | undefined\n  initGFXProps?: GFXProps\n}\n\nconst defaultGFXProps: GFXPropsComplete = {\n  renderType: [\"2d\"],\n  length: 1,\n  angle: 90,\n  center: [0,0],\n  width: 600,\n  height: 600,\n  strokeWeight: 1,\n  backgroundColor:\"#eee\"\n}\n\nconst LSImageViewerParent: React.FunctionComponent<LSImageViewerParentProps> = ({\n  LSystem = undefined,\n  initGFXProps: GFXProps = undefined,\n  drawCommand = undefined\n}) => {\n\n  const p5Context = useRef<p5>();\n  const canvasContainer = createRef<HTMLDivElement>();\n  const canvasTypeString = useRef<P5CanvasType>(\"p2d\");\n  const canvasID = useRef<string>(\"CANVAS-P52D\");\n  const gfxProps = useRef<GFXPropsComplete>( { ...defaultGFXProps, ...GFXProps});\n  const [currentDrawCommand, setCurrentDrawCommand] = useState<Axiom | undefined>(drawCommand);\n\n\n\n  //TODO: useEffect on prop changes (GFX Props, drawCommand, etc);\n\n\n  //Helper functions to draw\n  const defaultSetup = (p: p5) => {\n    let cnv = p.createCanvas(gfxProps.current.width, gfxProps.current.height)\n    cnv.id(canvasID.current);\n    p.angleMode(p.DEGREES);\n    p.colorMode(p.HSB);\n    p.noLoop();\n    p.textFont(\"monospace \", 12);\n    p.strokeCap(\"butt\")\n  }\n  const preload = (p:p5) => {\n    //Do nothing by default\n  }\n  const clearCanvas = (p : p5) => {\n    p.clear();\n    p.background(gfxProps.current.backgroundColor);\n  }\n  const moveToCanvasCenter = (p: p5) => {\n    if (!p) return\n    p.translate(p.width / 2, p.height / 2);\n  }\n  const rotateToUp = (p : p5) => {\n    if (p) p.rotate(-90);\n  }\n  const drawCurrentCommand = (p: p5) => {\n    p.push() \n    moveToCanvasCenter(p);\n    p.translate(gfxProps.current.center[0], gfxProps.current.center[1], 0);\n    rotateToUp(p);\n    p.fill(0,100,100);\n    p.ellipse(0,0,100,100);\n    p.pop()\n  }\n\n\n  //P5 Sketch - sent into P5 Constructor\n  const sketch = (p: p5) => {\n    //TODO: Can i abstract this out?\n    p.setup = () => {\n      defaultSetup(p);\n      preload(p);\n      p5Context.current = p;\n      redraw();\n    }\n    p.draw = () => {\n      //We don't use draw, just draw in Setup\n    }\n  }\n\n  const redraw = () => {\n    if (p5Context.current !== undefined) {\n      clearCanvas(p5Context.current)\n      drawCurrentCommand(p5Context.current);\n    } else {\n      console.warn(\"Couldn't redraw in the canvas, context is\", p5Context.current)\n    }\n  }\n\n  //Initial mount\n  useEffect(() => {\n    if (canvasContainer.current) \n      new p5(sketch, canvasContainer.current)\n    return () => {\n      p5Context.current?.remove();\n      p5Context.current = undefined;\n    };\n  }, [sketch, canvasContainer])\n\n\n  //TODO: Add Media Recorder.\n\n \n  return (\n    <div ref={this.containerRef} />\n  )\n}\n\nexport default LSImageViewerParent;","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer/LSImageViewer2D.tsx",["104","105","106"],"import React from \"react\"\nimport p5 from \"p5\"\nimport LSystem, { Axiom, Params, ParamsValue } from \"@bvk/lsystem\";\nimport { GFXProps } from \"../utils\";\nimport {Resizable, ResizeCallbackData} from \"react-resizable\";\nimport '../../styles/resizable.css'\n\ninterface myProps {\n  LSystem: LSystem | undefined;\n  drawFrame?: boolean\n  GFXProps?: GFXProps\n}\ninterface myState {\n  centerPoints: number[],\n  isRecording: boolean,\n  canvasSize: number[],\n  animationTimeoutSpeed: number,\n}\n\ninterface CanvasElement extends HTMLCanvasElement {\n  captureStream(frameRate?: number): MediaStream;\n}\n\nexport default class LSImageViewer2D extends React.Component<myProps, myState> {\n  p5Context: p5 | undefined;\n  containerRef = React.createRef<HTMLDivElement>();\n  canvasType : \"webgl\" | \"p2d\" = \"p2d\";\n  iterateAnimationIndex : undefined | number;\n  walkthroughAnimationIndex: undefined | number;\n  currentDrawCommand: Axiom | undefined;\n  customRules: {[key: string]: (p:p5, params: ParamsValue | undefined) => void} = {};\n  mediaRecorder: MediaRecorder | undefined;\n  recordedChunks: BlobPart[] = [];\n  canvasID = \"CANVAS-P52d\"\n\n  constructor(props: myProps) {\n    super(props);\n    this.drawChar = this.drawChar.bind(this);\n    this.redraw = this.redraw.bind(this);\n    this.state = {\n      centerPoints: this.props.GFXProps?.center ? this.props.GFXProps?.center : [0,0],\n      canvasSize: [this.props.GFXProps?.width || 600, this.props.GFXProps?.height || 600],\n      animationTimeoutSpeed: 500,\n      isRecording : false\n    }\n\n  }\n  componentDidMount() {\n    if (this.containerRef.current)\n      new p5(this.sketch, this.containerRef.current);\n  }\n  componentDidUpdate(prevProps: myProps, prevState: myState) {\n    if ( prevState.isRecording !== this.state.isRecording) {\n      return; // ignore recording updates\n    }\n    this.iterateAnimationIndex = this.props.LSystem?.iterations;\n    this.currentDrawCommand = this.props.LSystem?.getIterationAsObject();\n    this.redraw();\n  }\n  preload = (p :p5) => {\n\n  }\n  sketch = (p: p5) => {\n \n    p.setup = () => {\n      let cnv = p.createCanvas(this.state.canvasSize[0], this.state.canvasSize[1], this.canvasType);\n      cnv.id(this.canvasID);\n      p.angleMode(p.DEGREES);\n      p.colorMode(p.HSB);\n      p.noLoop();\n      p.textFont(\"monospace \", 12);\n      p.strokeCap(\"butt\")\n      //p.strokeCap(p.SQUARE)\n      this.preload(p);\n      this.p5Context = p;\n      this.redraw();\n    };\n    p.draw = () => {\n\n    }\n  };\n  componentWillUnmount = () => {\n    this.p5Context?.remove();\n    this.p5Context = undefined;\n  }\n  redraw() {\n    if (this.p5Context !== undefined) {\n      this.p5Context?.clear();\n      this.p5Context?.background(255, 0, 255,0);\n      this.drawCS();\n      this.p5Context?.noLoop();\n    } else {\n      console.log(\"Couldnt redraw\");\n      console.log(this.p5Context);\n    }\n  }\n  animateIterations = () => {\n    if (this.props.LSystem?.iterations === undefined || this.iterateAnimationIndex === undefined) {\n      console.log(\"Cant animate\");\n      return;\n    }\n    if (this.iterateAnimationIndex > this.props.LSystem?.iterations && !this.state.isRecording) {\n      console.log(\"Animation finished\");\n      this.iterateAnimationIndex = undefined;\n      return;\n    }\n    \n    let allIterations = this.props.LSystem.getAllIterationsAsObject();\n    let currentIteration = allIterations[this.iterateAnimationIndex];\n    this.currentDrawCommand = currentIteration;\n    this.redraw();\n    this.iterateAnimationIndex++;\n    setTimeout(this.animateIterations, this.state.animationTimeoutSpeed);\n  }\n  startIterationAnimation = () => {\n    this.walkthroughAnimationIndex = undefined;\n    this.iterateAnimationIndex = 0;\n    this.animateIterations();\n  }\n  toggleRecording = () => {\n    if (this.state.isRecording) {\n      this.stopRecording();\n    } else {\n      this.startRecording();\n    }\n  }\n  startRecording = () => {\n    if (this.mediaRecorder && this.mediaRecorder.state === \"recording\") {\n      return; //Already recording\n    }\n    let recordingCanvas = document.getElementById(this.canvasID) as CanvasElement;\n    if (recordingCanvas) {\n        let mediaStream = recordingCanvas.captureStream();\n        console.log(mediaStream);\n        let options = { mimeType: \"video/webm; codecs=vp9\" };\n        this.mediaRecorder = new MediaRecorder(mediaStream, options);\n        this.mediaRecorder.ondataavailable = (e: BlobEvent) => {\n          console.log(\"Data updated\");\n          if (e.data.size > 0) {\n            this.recordedChunks.push(e.data);\n            download([...this.recordedChunks]);\n            this.recordedChunks = [];\n          } else {\n            console.log(\"Empty!\");\n          }\n        };\n        this.mediaRecorder.start();\n        this.setState({isRecording: true})\n        this.animateIterations();\n    }\n  }\n  stopRecording = () => {\n    if (this.mediaRecorder && this.mediaRecorder.state === \"recording\") {\n      console.log(\"stopping recording\");\n      this.mediaRecorder.stop();\n      this.setState({isRecording: false});\n      //download(this.recordedChunks);\n    }\n  }\n  setDefaults = (p: p5) => {\n    //let center = this.props.GFXProps?.center !== undefined ? [p.width * this.props.GFXProps?.center[0], p.height * this.props.GFXProps?.center[1]] : [0, 0];\n    let center = [this.state.centerPoints[0] * p.width, this.state.centerPoints[1] * p.height];\n    let sw = this.props.GFXProps?.strokeWeight ? this.props.GFXProps?.strokeWeight : 1;\n    let defaultLength = this.props.GFXProps?.length ? this.props.GFXProps?.length : 0.01 * p.height;\n    let defaultAngle = this.props.GFXProps?.angle ? this.props.GFXProps?.angle : 90;\n    return {center, sw, defaultLength, defaultAngle}\n  }\n  drawCS = () => {\n    if (this.props.LSystem !== undefined) {\n      //Setup drawing\n      let cS = this.currentDrawCommand || this.props.LSystem.getIterationAsObject();\n      let p = this.p5Context as p5;\n\n      p.background(100,0,100);\n\n      //Setup default values \n      let {center, sw, defaultLength, defaultAngle} = this.setDefaults(p);\n\n      if (true)\n        this.drawFrame(p);\n\n      //Begin drawing\n      p.push();\n      this.moveToCenter()\n      p.translate(center[0], center[1], 0);\n\n      this.rotateToUp();\n      p.noFill();\n      p.stroke(0, 0, 0);\n      p.strokeWeight(sw);\n      \n      let steps = cS.length;\n      for (let i = 0; i < steps; i++) {\n        let letter = cS[i];\n        let char = letter.symbol;\n        let params = letter.params;\n        let param = letter.params && letter.params.length == 1 ? letter.params[0] + \"\" : undefined;\n        let val = param && !isNaN(parseFloat(param)) ? parseFloat(param) : undefined\n        this.drawChar(char, val || defaultLength, val || defaultAngle, params);\n      }\n      p.pop();\n      p.noLoop();\n    }\n  }\n  drawFrame = (p: p5) => {\n    \n    let baseFrameWidth = 0.01 * p.width;\n    let oneRow = baseFrameWidth; \n    let halfRow = 0.5 * baseFrameWidth;\n    let frameFactor  = 5;\n    let sw = 1;\n    let hw = 0.5;\n\n\n    p.push();\n  \n    \n    //Ground\n    p.push();\n    p.background(\"#A7ECFF\");\n\n    p.stroke(0,0,0);\n    p.strokeWeight(1);\n    p.fill(\"#41e85a\");\n    p.rect( -10, 0.8 * p.height ,p.width + 10, p.height);\n    p.pop();\n\n\n    p.push();\n    p.noFill();\n    let runningOffset = 0;\n\n    //Dark yellow\n    p.stroke(\"#ddb84f\");\n    p.strokeWeight(oneRow);\n    p.rect(halfRow, halfRow, p.width - oneRow, p.height - oneRow);\n    runningOffset +=  oneRow;\n    p.stroke(\"#000000\");\n    p.strokeWeight(sw);\n    p.rect(runningOffset + hw, runningOffset + hw , p.width - (2 * runningOffset + sw),  p.height - (2 * runningOffset + sw));\n    runningOffset += sw;\n\n    // //Light yellow\n    p.stroke(\"#ffcb23\");\n    p.strokeWeight(oneRow);\n    p.rect(halfRow + runningOffset, halfRow + runningOffset, p.width - (2 * runningOffset + oneRow),  p.height - (2 * runningOffset + oneRow));\n    runningOffset += oneRow;\n    p.stroke(\"#000000\");\n    p.strokeWeight(sw);\n    p.rect(runningOffset + hw, runningOffset + hw , p.width - (2 * runningOffset + sw),  p.height - (2 * runningOffset + sw));\n    runningOffset += sw;\n    \n\n    // // //orange, #ffb201\n    p.stroke(\"#ffb201\");\n    p.strokeWeight(frameFactor * oneRow);\n    p.rect(frameFactor * halfRow + runningOffset, frameFactor * halfRow + runningOffset, p.width - (2 * runningOffset + frameFactor * oneRow),  p.height - (2 * runningOffset + frameFactor * oneRow));\n    runningOffset += frameFactor * oneRow;\n    p.stroke(\"#000000\");\n    p.strokeWeight(sw);\n    p.rect(runningOffset + hw, runningOffset + hw , p.width - (2 * runningOffset + sw),  p.height - (2 * runningOffset + sw));\n    runningOffset += sw;\n\n  \n    // // //white\n    p.stroke(\"#ffffff\");\n    p.strokeWeight(baseFrameWidth);\n    p.rect(halfRow + runningOffset, halfRow + runningOffset, p.width - (2 * runningOffset + oneRow),  p.height - (2 * runningOffset + oneRow));\n    runningOffset += oneRow;\n    p.stroke(\"#000000\");\n    p.strokeWeight(sw);\n    p.rect(runningOffset + hw, runningOffset + hw , p.width - (2 * runningOffset + sw),  p.height - (2 * runningOffset + sw));\n    runningOffset += sw;\n\n    p.pop();\n    p.pop();\n  }\n  rotateToUp = () => {\n    let p = this.p5Context;\n    if (p) p.rotate(-90);\n  }\n  moveToCenter = () => {\n    let p = this.p5Context;\n    if (p) p.translate(p.width / 2, p.height / 2);\n  }\n  drawChar(char: string, l: number, a: number, params: ParamsValue | undefined) {\n    let p = this.p5Context;\n    if (!p) return;\n    switch (char) {\n      case \"F\":\n        p.line(0, 0, l, 0);\n        p.translate(l, 0);\n        break;\n      case \"f\":\n        p.translate(l, 0);\n        break;\n      case \"+\":\n        p.rotate(a);\n        break;\n      case \"-\":\n        p.rotate(-a);\n        break;\n      case \"[\":\n        p.push()\n        break;\n      case \"]\":\n        p.pop();\n        break;\n      case \"E\":\n        p.ellipse(0, 0, l, l);\n        break;\n      case \"!\":\n        p.strokeWeight(l)\n        break;\n      case \"~\":\n        p.rotate(Math.random() * a);\n        break;\n      case \"#\":\n        if (!l || l == 0) p.stroke(0, 0, 0);\n        else {\n          let h = params && params[0] ? parseFloat(params[0] as string) : 0;\n          let s = params && params[1] ? parseFloat(params[1] as string) : 100;\n          let b = params && params[2] ? parseFloat(params[2] as string) : 100;\n          p.stroke(h, s, b);\n        }\n        break;\n      default:\n        if (this.customRules[char]) {\n          this.customRules[char](p,params);\n        }\n      //console.log(char + \" isn't turtle command\");\n    }\n  }\n  moveCenterPoints = (xD: number,yD: number) => {\n    const amount = 0.05;\n    let x = xD * amount;\n    let y = yD * amount;\n    let newCenterPoints = [this.state.centerPoints[0] + x, this.state.centerPoints[1] + y];\n    this.setState({centerPoints: newCenterPoints});\n  }\n  \n  onResize = (event: React.SyntheticEvent<Element, Event>, data: ResizeCallbackData) => {\n    this.setState({canvasSize: [data.size.width, data.size.height]});\n    this.p5Context?.resizeCanvas(data.size.width, data.size.height);\n    this.redraw();\n  };\n\n  render() {\n    return (\n      <div className=\"stack small\">\n        <div>\n          <span className=\"clickable\" onClick={() => this.startIterationAnimation()}>\n            {\" \"}\n            animate growth{\" \"}\n          </span>\n          <span className=\"clickable\" onClick={() => this.toggleRecording()}>\n            {\" \"}\n            {this.state.isRecording ? \"🔴 Stop recording\" : \"Start recording\"}{\" \"}\n          </span>\n          <span className=\"clickable\" onClick={() => this.moveCenterPoints(-1, 0)}>\n            {\" \"}\n            ←{\" \"}\n          </span>\n          <span className=\"clickable\" onClick={() => this.moveCenterPoints(1, 0)}>\n            {\" \"}\n            ➝{\" \"}\n          </span>\n          <span className=\"clickable\" onClick={() => this.moveCenterPoints(0, -1)}>\n            {\" \"}\n            ↑{\" \"}\n          </span>\n          <span className=\"clickable\" onClick={() => this.moveCenterPoints(0, 1)}>\n            {\" \"}\n            ↓{\" \"}\n          </span>\n          <div >\n            <input\n              value={this.state.animationTimeoutSpeed}\n              onChange={(e) => {\n                let s = parseInt(e.target.value);\n                this.setState({ animationTimeoutSpeed: s });\n              }}\n            ></input>\n          </div>\n        </div>\n        <Resizable width={this.state.canvasSize[0]} height={this.state.canvasSize[1]} onResize={this.onResize}>\n          <div ref={this.containerRef} />\n        </Resizable>\n      </div>\n    );\n  }\n\n}\n\n\n\nfunction download(recordedChunks: BlobPart[]) {\n  console.log(\"Download triggered\", recordedChunks);\n  var blob = new Blob(recordedChunks, {\n    type: \"video/webm\"\n  });\n  var url = URL.createObjectURL(blob);\n  var a = document.createElement(\"a\");\n  document.body.appendChild(a);\n  a.href = url;\n  a.download = \"test.webm\";\n  //console.log(a);\n  a.click();\n  // window.URL.revokeObjectURL(url);\n}\n",{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","severity":1,"message":"112","line":4,"column":8,"nodeType":"113","messageId":"114","endLine":4,"endColumn":16},{"ruleId":"111","severity":1,"message":"115","line":5,"column":20,"nodeType":"113","messageId":"114","endLine":5,"endColumn":38},{"ruleId":"116","severity":1,"message":"117","line":108,"column":24,"nodeType":"118","messageId":"119","endLine":108,"endColumn":26},{"ruleId":"116","severity":1,"message":"117","line":111,"column":24,"nodeType":"118","messageId":"119","endLine":111,"endColumn":26},{"ruleId":"116","severity":1,"message":"117","line":114,"column":24,"nodeType":"118","messageId":"119","endLine":114,"endColumn":26},{"ruleId":"116","severity":1,"message":"117","line":117,"column":24,"nodeType":"118","messageId":"119","endLine":117,"endColumn":26},{"ruleId":"111","severity":1,"message":"120","line":4,"column":29,"nodeType":"113","messageId":"114","endLine":4,"endColumn":37},{"ruleId":"116","severity":1,"message":"117","line":43,"column":40,"nodeType":"118","messageId":"119","endLine":43,"endColumn":42},{"ruleId":"111","severity":1,"message":"121","line":69,"column":9,"nodeType":"113","messageId":"114","endLine":69,"endColumn":15},{"ruleId":"116","severity":1,"message":"117","line":70,"column":40,"nodeType":"118","messageId":"119","endLine":70,"endColumn":42},{"ruleId":"116","severity":1,"message":"117","line":105,"column":40,"nodeType":"118","messageId":"119","endLine":105,"endColumn":42},{"ruleId":"111","severity":1,"message":"122","line":6,"column":10,"nodeType":"113","messageId":"114","endLine":6,"endColumn":21},{"ruleId":"111","severity":1,"message":"123","line":33,"column":9,"nodeType":"113","messageId":"114","endLine":33,"endColumn":25},{"ruleId":"111","severity":1,"message":"124","line":36,"column":10,"nodeType":"113","messageId":"114","endLine":36,"endColumn":28},{"ruleId":"111","severity":1,"message":"125","line":36,"column":30,"nodeType":"113","messageId":"114","endLine":36,"endColumn":51},{"ruleId":"126","severity":1,"message":"127","line":79,"column":9,"nodeType":"128","endLine":90,"endColumn":4},{"ruleId":"111","severity":1,"message":"129","line":3,"column":26,"nodeType":"113","messageId":"114","endLine":3,"endColumn":32},{"ruleId":"116","severity":1,"message":"117","line":197,"column":59,"nodeType":"118","messageId":"119","endLine":197,"endColumn":61},{"ruleId":"116","severity":1,"message":"117","line":319,"column":21,"nodeType":"118","messageId":"119","endLine":319,"endColumn":23},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"@typescript-eslint/no-unused-vars","'P5Turtle' is defined but never used.","Identifier","unusedVar","'ResizeCallbackData' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'GFXProps' is defined but never used.","'mouseX' is assigned a value but never used.","'useCallback' is defined but never used.","'canvasTypeString' is assigned a value but never used.","'currentDrawCommand' is assigned a value but never used.","'setCurrentDrawCommand' is assigned a value but never used.","react-hooks/exhaustive-deps","The 'sketch' function makes the dependencies of useEffect Hook (at line 109) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'sketch' in its own useCallback() Hook.","VariableDeclarator","'Params' is defined but never used.","no-global-assign","no-unsafe-negation"]