[{"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/index.tsx":"1","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSPreview.tsx":"2","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/EditorPage.tsx":"3","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/utils.ts":"4","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditor.tsx":"5","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSCustomizer.tsx":"6","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer.tsx":"7","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSDraw/P5Turtle3D.tsx":"8","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSDraw/P5Turtle.tsx":"9","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSDraw/P5TurtlePixel.tsx":"10","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/ExamplesPage.tsx":"11","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/Examples/Lilac.tsx":"12"},{"size":838,"mtime":1612129883678,"results":"13","hashOfConfig":"14"},{"size":4005,"mtime":1612129936272,"results":"15","hashOfConfig":"14"},{"size":1337,"mtime":1612046126268,"results":"16","hashOfConfig":"14"},{"size":2780,"mtime":1611966469018,"results":"17","hashOfConfig":"14"},{"size":1474,"mtime":1612129574895,"results":"18","hashOfConfig":"14"},{"size":13275,"mtime":1611966274849,"results":"19","hashOfConfig":"14"},{"size":1331,"mtime":1612129535029,"results":"20","hashOfConfig":"14"},{"size":3922,"mtime":1612129074838,"results":"21","hashOfConfig":"14"},{"size":5357,"mtime":1612129074357,"results":"22","hashOfConfig":"14"},{"size":2583,"mtime":1612129068723,"results":"23","hashOfConfig":"14"},{"size":3528,"mtime":1612129862744,"results":"24","hashOfConfig":"14"},{"size":760,"mtime":1612129406254,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"doautr",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/index.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSPreview.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/EditorPage.tsx",[],["56","57"],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/utils.ts",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSEditor.tsx",["58"],"import React from \"react\";\nimport LSystem from \"@bvk/lsystem\";\nimport LSCustomizer from \"./LSCustomizer\";\nimport P5Turtle from \"./LSDraw/P5Turtle\";\nimport { GFXProps, LSProps } from \"./utils\";\nimport LSViewer from \"./LSViewer\";\n\n\n/* LSEditor.ts\n* This class is a combination of an LSCustomizer and an LSViewer\n* It manages updates from the customizer, and mantains LS/GFXProps to pass into the viewer.\n* */\ninterface LSEditorState {\n  LSystem: LSystem | undefined,\n  gfxProps?: GFXProps\n}\ninterface LSEditorProps {\n  initLSProps: LSProps\n  initGFXProps?: GFXProps\n}\nexport default class LSEditor extends React.Component<LSEditorProps, LSEditorState> {\n  state: LSEditorState = {\n      LSystem: undefined,\n      gfxProps: this.props.initGFXProps || {}\n  }\n  onLSIterated = (LS: LSystem) => {\n      this.setState({ LSystem: LS })\n  }\n  onLSReset = (LS: LSystem) => {\n      this.setState({ LSystem: LS });\n  }\n  onGFXPropsUpdated = (gfxProps: GFXProps) => {\n      this.setState({gfxProps: gfxProps});\n  }\n  render() {\n      return (\n      <div className=\"side-by-side\">\n          <LSCustomizer\n          onLSIterated={this.onLSIterated}\n          onLSReset={this.onLSReset}\n          onGFXPropsUpdate={this.onGFXPropsUpdated}\n          initLSProps={this.props.initLSProps}\n          initGFXProps={this.props.initGFXProps}\n          key=\"LSCustomizer\"\n          />\n          <LSViewer LSystem={this.state.LSystem} gfxProps={this.state.gfxProps}/>\n      </div >\n      )\n    }\n}\n\n","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSCustomizer.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSViewer.tsx",["59"],"import LSystem from \"@bvk/lsystem\";\nimport React from \"react\"\nimport { findAllInRenderedTree } from \"react-dom/test-utils\";\nimport P5Turtle from \"./LSDraw/P5Turtle\";\nimport P5Turtle3D from \"./LSDraw/P5Turtle3D\";\nimport P5TurtlePixel from \"./LSDraw/P5TurtlePixel\";\nimport {GFXProps} from \"./utils\"\n\n/* LSViewer.ts\n* This class shows a given LSystem and GFXProps (through Props) in every renderer\n* It is used primarily by LSEditor.\n* */\ninterface myProps {\n  LSystem: LSystem | undefined;\n  gfxProps?: GFXProps\n}\nexport default class LSViewer extends React.Component<myProps>{\n  \n  render() {\n    return (\n      <div className=\"canvas-border\"> \n        <P5Turtle3D key=\"gfx-3d-viewer\" LSystem={this.props.LSystem} GFXProps={this.props.gfxProps}/>\n        <P5TurtlePixel key=\"gfx-pixel-view\" LSystem={this.props.LSystem} GFXProps={this.props.gfxProps}/>\n        <P5Turtle key=\"gfx-viewer\" LSystem={this.props.LSystem} GFXProps={this.props.gfxProps} />        \n        <div key=\"text-viewer\"> {LSText(this.props.LSystem)} </div>\n      </div>\n    )\n  }\n}\n\nexport function LSText(LSystem: LSystem | undefined) {\n  if (!LSystem) return \"LSystem doesnt exist\"\n  let text = LSystem.getAllIterationsAsString();\n  let textDivs = text.map((val, index) => (\n    <li>  {val}  </li>\n  ));\n  return <ol style={{width: \"100%\"}}> {textDivs} </ol>\n}","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSDraw/P5Turtle3D.tsx",["60","61","62","63"],"import { ParamsValue } from \"@bvk/lsystem\";\nimport p5 from \"p5\";\nimport P5Turtle from \"./P5Turtle\";\n\nexport default class P5Turtle3D extends P5Turtle {\n  canvasType : \"webgl\" | \"p2d\" = \"webgl\";\n  models : p5.Geometry[] = [];\n  private cameraPos: number[] | undefined;\n  private cameraNum = 0;\n\n  rotateToUp = () => {\n    let p = this.p5Context;\n    if (p) p.rotate(-180);\n  }\n  preload = (p: p5) => {\n    p.loadModel(process.env.PUBLIC_URL + \"/assets/lily-flat.obj\", true, (m) => {console.log(\"Success\"); console.log(m); this.models.push(m)}, (e) => {console.log(e); console.log(\"Fail\")});\n  }\n  moveToCenter = () => {\n    //Do nothing, were already there\n    let p = this.p5Context;\n    if (!p) return;\n    if (!this.cameraPos)  this.cameraPos = [0, 0, p.height/2];\n    p.camera(this.cameraPos[0], this.cameraPos[1], this.cameraPos[2], 0, 0, 0, 0, 1, 0);\n  }\n  drawChar = (char: string, l: number, a: number, params: ParamsValue | undefined) => {\n    let p = this.p5Context;\n    if (!p) return\n    switch (char) {\n      case \"F\":\n        p.line(0, 0, 0, l);\n        p.translate(0, l);\n        break;\n      case \"f\":\n        p.translate(0, l);\n        break;\n      case \"[\":\n        p.push();\n        break;\n      case \"]\":\n        p.pop();\n        break;\n      //Here: Yaw is around Z axis, giving you +/- on the YX plane \n      //What that means, is a 2d curve will be drawn on the YX plane  \n      case \"+\":\n        p.rotateZ(a);\n        break;\n      case \"-\":\n        p.rotateZ(-a);\n        break;\n      //PITCH is around X axis, giving you &/^ (pitch down/up) \n      //So pitching up down gives you rotation \"up/down\" w.r.t to up axis \n      case \"&\":\n        p.rotateX(a);\n        break;\n      case \"^\":\n        p.rotateX(-a)\n        break;\n      //ROLL is around Y axis, gives you a roll around itself\n      //Without any PITCH, Roll is meaningless for a line (just rolls around itself)\n      case '\\'':\n        p.rotateY(a);\n        break;\n      case '/':\n        p.rotateY(-a);\n        break;\n      case \"E\":\n        if (params && params[1]) {\n          p.fill(parseFloat(params[1] as string), 100,100 );\n        }\n        p.ellipse(0, 0, l, l);\n        p.noFill();\n        break;\n      case \"!\":\n        p.strokeWeight(l)\n        break;\n      case \"~\":\n        p.rotateX(Math.random() * a);\n        p.rotateY(Math.random() * a);\n        p.rotateZ(Math.random() * a);\n        break;\n      case \"#\":\n        p.stroke(l, 100, 100);\n        break;\n      case \"M\":\n        //TODO: Generalize this... for now its just staticly drawing a lily flower\n        let model = this.models[0];\n        if (model) {\n          //p.normalMaterial(); \n          p.specularMaterial(250);\n          //p.scale(10);\n          //let scaleValue = params && params[0] || parseFloat((params as ParamsValue)[0]) || 0.1;\n          p.scale(0.1);\n          console.log(\"Should be drawing model\");\n          p.model(model);\n        }\n        break;\n      default:\n        //console.log(char + \" isn't turtle command\");\n        break;\n      }\n    }\n\n  moveCamera = () => {\n    if (!this.p5Context) return;\n    let displacement = this.p5Context.height / 2;\n    if (this.cameraNum == 0) {\n      this.cameraPos = [0, 0, displacement];\n    }\n    if (this.cameraNum == 1) {\n      this.cameraPos = [displacement, 30, 0];\n    }\n    if (this.cameraNum == 2) {\n      this.cameraPos = [0, 0, -displacement];\n    }\n    if (this.cameraNum == 3) {\n      this.cameraPos = [-displacement, 0, 0];\n    }\n    this.cameraNum = this.cameraNum + 1;\n    this.cameraNum = this.cameraNum > 3 ? 0 : this.cameraNum;\n    //this.cameraPos[1] += 30;\n  }\n\n  render() {\n    return (\n      <div>\n        <span className=\"clickable\" onClick={(e) => {this.moveCamera(); this.redraw()}}> rotate me </span> \n        <span className=\"clickable\" onClick={() => this.startIterationAnimation()}> animate growth </span>\n        <div ref={this.containerRef} />\n      </div>\n    )\n  }\n\n}\n","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSDraw/P5Turtle.tsx",["64","65"],"import React from \"react\"\nimport p5 from \"p5\"\nimport LSystem, { Axiom, ParamsValue } from \"@bvk/lsystem\";\nimport { GFXProps } from \"../utils\";\n\ninterface myProps {\n  LSystem: LSystem | undefined;\n  GFXProps?: GFXProps\n}\nexport default class P5Turtle extends React.Component<myProps> {\n  p5Context: p5 | undefined;\n  containerRef = React.createRef<HTMLDivElement>();\n  canvasType : \"webgl\" | \"p2d\" = \"p2d\";\n  iterateAnimationIndex : undefined | number;\n  walkthroughAnimationIndex: undefined | number;\n  currentDrawCommand: Axiom | undefined;\n  \n\n  constructor(props: myProps) {\n    super(props);\n    this.drawChar = this.drawChar.bind(this);\n    this.redraw = this.redraw.bind(this);\n  }\n  componentDidMount() {\n    if (this.containerRef.current)\n      new p5(this.sketch, this.containerRef.current);\n  }\n  componentDidUpdate() {\n    this.redraw();\n  }\n  preload = (p :p5) => {\n\n  }\n  sketch = (p: p5) => {\n \n    p.setup = () => {\n      p.createCanvas(this.props.GFXProps?.width || 600, this.props.GFXProps?.height || 600, this.canvasType);\n      p.angleMode(p.DEGREES);\n      p.colorMode(p.HSB);\n      p.noLoop();\n      p.textFont(\"monospace \", 12);\n      p.strokeCap(\"butt\")\n      //p.strokeCap(p.SQUARE)\n      this.preload(p);\n      this.p5Context = p;\n      this.redraw();\n    };\n    p.draw = () => {\n\n    }\n  };\n  componentWillUnmount = () => {\n    this.p5Context?.remove();\n    this.p5Context = undefined;\n  }\n  redraw() {\n    if (this.p5Context !== undefined) {\n      this.p5Context?.clear();\n      this.p5Context?.background(255, 0, 255);\n      this.drawCS();\n      this.p5Context?.noLoop();\n    } else {\n      console.log(\"Couldnt redraw\");\n      console.log(this.p5Context);\n    }\n  }\n  animateIterations = () => {\n    if (this.props.LSystem?.iterations === undefined || this.iterateAnimationIndex === undefined) {\n      console.log(\"Cant animate\");\n      return;\n    }\n    if (this.iterateAnimationIndex > this.props.LSystem?.iterations) {\n      console.log(\"Animation finished\");\n      this.iterateAnimationIndex = undefined;\n      return;\n    }\n    \n    let allIterations = this.props.LSystem.getAllIterationsAsObject();\n    let currentIteration = allIterations[this.iterateAnimationIndex];\n    this.currentDrawCommand = currentIteration;\n    this.redraw();\n    this.iterateAnimationIndex++;\n    setTimeout(this.animateIterations, 100);\n  }\n  startIterationAnimation = () => {\n    this.walkthroughAnimationIndex = undefined;\n    this.iterateAnimationIndex = 0;\n    this.animateIterations();\n  }\n  drawCS = () => {\n    if (this.props.LSystem !== undefined) {\n      //Setup drawing\n      let cS = this.currentDrawCommand || this.props.LSystem.getIterationAsObject();\n      let p = this.p5Context as p5;\n\n      //Setup default values \n      let center = this.props.GFXProps?.center !== undefined ? [p.width * this.props.GFXProps?.center[0], p.height * this.props.GFXProps?.center[1]] : [0, 0];\n      let sw = this.props.GFXProps?.strokeWeight ? this.props.GFXProps?.strokeWeight : 1;\n      let defaultLength = this.props.GFXProps?.length ? this.props.GFXProps?.length : 0.01 * p.height;\n      let defaultAngle = this.props.GFXProps?.angle ? this.props.GFXProps?.angle : 90;\n\n      //Begin drawing\n      p.push();\n      this.moveToCenter()\n      p.translate(center[0], center[1], 0);\n\n      this.rotateToUp();\n      p.noFill();\n      p.stroke(0, 0, 0);\n      p.strokeWeight(sw);\n      \n      let steps = cS.length;\n      for (let i = 0; i < steps; i++) {\n        let letter = cS[i];\n        let char = letter.symbol;\n        let params = letter.params;\n        let param = letter.params && letter.params.length == 1 ? letter.params[0] + \"\" : undefined;\n        let val = param && !isNaN(parseFloat(param)) ? parseFloat(param) : undefined\n        this.drawChar(char, val || defaultLength, val || defaultAngle, params);\n      }\n      p.pop();\n      p.noLoop();\n    }\n  }\n  rotateToUp = () => {\n    let p = this.p5Context;\n    if (p) p.rotate(-90);\n  }\n  moveToCenter = () => {\n    let p = this.p5Context;\n    if (p) p.translate(p.width / 2, p.height / 2);\n  }\n  drawChar(char: string, l: number, a: number, params: ParamsValue | undefined) {\n    let p = this.p5Context;\n    if (!p) return;\n    switch (char) {\n      case \"F\":\n        p.line(0, 0, l, 0);\n        p.translate(l, 0);\n        break;\n      case \"f\":\n        p.translate(l, 0);\n        break;\n      case \"+\":\n        p.rotate(a);\n        break;\n      case \"-\":\n        p.rotate(-a);\n        break;\n      case \"[\":\n        p.push()\n        break;\n      case \"]\":\n        p.pop();\n        break;\n      case \"E\":\n        p.ellipse(0, 0, l, l);\n        break;\n      case \"!\":\n        p.strokeWeight(l)\n        break;\n      case \"~\":\n        p.rotate(Math.random() * a);\n        break;\n      case \"#\":\n        if (!l || l==0)  p.stroke(0,0,0);\n        else p.stroke(l, 100, 100);\n        break;\n      // case \"T\":\n      //   let txtvalue = \"text\";\n      //   if (params) {\n      //     txtvalue = params[Math.floor(Math.random() * params.length)] as string;\n      //   }\n      //   p.text(txtvalue,0,0);\n      //   break;\n      default:\n      //console.log(char + \" isn't turtle command\");\n    }\n  }\n\n  render() {\n    return (<div>\n      <span className=\"clickable\" onClick={() => this.startIterationAnimation()}> animate growth </span>\n      <div ref={this.containerRef} />\n    </div>)\n  }\n\n}\n","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/LSDraw/P5TurtlePixel.tsx",["66"],"\nimport { ParamsValue } from \"@bvk/lsystem\";\nimport P5Turtle from \"./P5Turtle\";\n\nconst pixelWidth = 5;\n\n\nexport default class P5TurtlePixel extends P5Turtle {\n  canvasType : \"webgl\" | \"p2d\" = \"p2d\";\n\n  rotationStack : number[] = [0];\n  currentAngle: number = 0;\n\n  private cameraPos: number[] | undefined;\n  private cameraNum = 0;\n\n  \n  currentAsRadians = () => {\n    return this.currentAngle * (Math.PI/180);\n  }\n  rotateToUp = () => {\n    this.currentAngle = 0;\n    this.rotationStack = [];\n    let p = this.p5Context;\n    this.currentAngle = -90;\n  }\n  moveToCenter = () => {\n    //Do nothing, were already there\n    let p = this.p5Context;\n    if (p) p.translate(p.width / 2, p.height / 2);\n  }\n  \n  drawChar = (char: string, l: number, a: number, params: ParamsValue | undefined) => {\n    let p = this.p5Context;\n    if (!p) return\n    switch (char) {\n      case \"F\":\n        let numPixels = Math.ceil(l  / pixelWidth);\n        let eachAngle = this.currentAsRadians()\n        console.log(eachAngle);\n        for (let i=0; i< numPixels ; i++){\n          p.translate(pixelWidth * Math.cos(eachAngle),  pixelWidth * Math.sin(eachAngle));\n          p.rect(0,0, pixelWidth, pixelWidth);\n          \n        }\n        break;\n      case \"f\":\n        p.translate(0, l * Math.sin(this.currentAsRadians()));\n        break;\n      case \"[\":\n        p.push();\n        this.rotationStack.push(this.currentAngle);\n        this.currentAngle = 0;\n        break;\n      case \"]\":\n        p.pop();\n        let current = this.rotationStack.pop();\n        if (current) {\n          console.log(\"****** Resetting current\");\n          this.currentAngle = current;\n          console.log(this.currentAngle)\n        }\n        break;\n      case \"+\":\n        this.currentAngle += a;\n        break;\n      case \"-\":\n        this.currentAngle -= a;\n        break;\n      case \"E\":\n        if (params && params[1]) {\n          p.fill(parseFloat(params[1] as string), 100,100 );\n        }\n        p.ellipse(0, 0, l, l);\n        break;\n      case \"!\":\n        //p.strokeWeight(l)\n        break;\n      case \"~\":\n        //p.rotate(Math.random() * a);\n        this.currentAngle += (Math.random() * a);\n        break;\n      case \"#\":\n        p.stroke(l, 100, 100);\n        p.fill(l,100,100);\n        break;\n      default:\n        //console.log(char + \" isn't turtle command\");\n        break;\n      }\n    }\n\n\n  render() {\n    return (\n      <div>\n        <span className=\"clickable\" onClick={() => this.startIterationAnimation()}> animate growth </span>\n        <div ref={this.containerRef} />\n      </div>\n    )\n  }\n\n}\n","/Users/bhavik/Documents/Active/tend/lsystem-examples/src/pages/ExamplesPage.tsx",[],"/Users/bhavik/Documents/Active/tend/lsystem-examples/src/components/Examples/Lilac.tsx",["67"],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":4,"column":8,"nodeType":"74","messageId":"75","endLine":4,"endColumn":16},{"ruleId":"72","severity":1,"message":"76","line":3,"column":10,"nodeType":"74","messageId":"75","endLine":3,"endColumn":31},{"ruleId":"77","severity":1,"message":"78","line":106,"column":24,"nodeType":"79","messageId":"80","endLine":106,"endColumn":26},{"ruleId":"77","severity":1,"message":"78","line":109,"column":24,"nodeType":"79","messageId":"80","endLine":109,"endColumn":26},{"ruleId":"77","severity":1,"message":"78","line":112,"column":24,"nodeType":"79","messageId":"80","endLine":112,"endColumn":26},{"ruleId":"77","severity":1,"message":"78","line":115,"column":24,"nodeType":"79","messageId":"80","endLine":115,"endColumn":26},{"ruleId":"77","severity":1,"message":"78","line":117,"column":59,"nodeType":"79","messageId":"80","endLine":117,"endColumn":61},{"ruleId":"77","severity":1,"message":"78","line":166,"column":20,"nodeType":"79","messageId":"80","endLine":166,"endColumn":22},{"ruleId":"72","severity":1,"message":"81","line":24,"column":9,"nodeType":"74","messageId":"75","endLine":24,"endColumn":10},{"ruleId":"72","severity":1,"message":"82","line":4,"column":29,"nodeType":"74","messageId":"75","endLine":4,"endColumn":37},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"@typescript-eslint/no-unused-vars","'P5Turtle' is defined but never used.","Identifier","unusedVar","'findAllInRenderedTree' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'p' is assigned a value but never used.","'GFXProps' is defined but never used.","no-global-assign","no-unsafe-negation"]